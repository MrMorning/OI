#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
const int MOD = 1000000007;

int calc(string s1, string s2) {
	int len1 = s1.size(), len2 = s2.size();
	int ans = 0;
	for ( int i = 0; i + len1 - 1 < len2; i ++ )
		ans += s1 == s2.substr(i, len1);
	return ans;
}

void add(int &x, int y) {
	x += y;
	x %= MOD;
	if ( x < 0 ) x += MOD;
}

class AkariDaisukiDiv1 {
	public:
		string memo[55];
		int appear[55];
		int countF(string Waai, string Akari, string Daisuki, string S, string F, int k) {
			memo[0] = S;
			appear[0] = calc(F, S);
			for ( int i = 1; i <= 54; i ++ ) {
				memo[i] = Waai;
				int len = memo[i - 1].size();
				if ( len < 100 ) {
					memo[i] += memo[i - 1];
					add(appear[i], -appear[i-1]);
				} else { 
					memo[i] += memo[i - 1].substr(0, 49) + "$" + memo[i - 1].substr(len - 49, 49);
					add(appear[i], -calc(F, memo[i-1].substr(0, 49)));
					add(appear[i], -calc(F, memo[i-1].substr(len - 49, 49)));
				}
				memo[i] += Akari;
				if ( len < 100 ) {
					memo[i] += memo[i - 1];
					add(appear[i], -appear[i-1]);
				} else { 
					memo[i] += memo[i - 1].substr(0, 49) + "$" + memo[i - 1].substr(len - 49, 49);
					add(appear[i], -calc(F, memo[i-1].substr(0, 49)));
					add(appear[i], -calc(F, memo[i-1].substr(len - 49, 49)));
				}
				memo[i] += Daisuki;
				add(appear[i], (2 * appear[i - 1] % MOD + calc(F, memo[i])) % MOD);
			}
			if ( k <= 54 ) return appear[k];
			assert((appear[54] - 2*appear[53] % MOD + MOD) % MOD
					== (appear[53] - 2*appear[52] % MOD + MOD) % MOD);
			int coef = (appear[54] - 2*appear[53] % MOD + MOD) % MOD;
			int curAns = appear[54];
			for ( int i = 55; i <= k; i ++ ) 
				curAns = (2*curAns % MOD + coef) % MOD;
			return curAns;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, string p1, string p2, string p3, string p4, int p5, bool hasAnswer, int p6) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "\"" << p1 << "\"" << "," << "\"" << p2 << "\"" << "," << "\"" << p3 << "\"" << "," << "\"" << p4 << "\"" << "," << p5;
	cout << "]" << endl;
	AkariDaisukiDiv1 *obj;
	int answer;
	obj = new AkariDaisukiDiv1();
	clock_t startTime = clock();
	answer = obj->countF(p0, p1, p2, p3, p4, p5);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p6 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p6;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	string p0;
	string p1;
	string p2;
	string p3;
	string p4;
	int p5;
	int p6;

	{
		// ----- test 0 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "x";
		p4 = "axb";
		p5 = 2;
		p6 = 2;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "x";
		p4 = "abcdefghij";
		p5 = 1;
		p6 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = "a";
		p1 = "a";
		p2 = "a";
		p3 = "b";
		p4 = "aba";
		p5 = 2;
		p6 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = "a";
		p1 = "b";
		p2 = "c";
		p3 = "d";
		p4 = "baadbdcbadbdccccbaaaadbdcbadbdccbaadbdcba";
		p5 = 58;
		p6 = 191690599;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = "a";
		p1 = "x";
		p2 = "y";
		p3 = "b";
		p4 = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab";
		p5 = 49;
		p6 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = "waai";
		p1 = "akari";
		p2 = "daisuki";
		p3 = "usushio";
		p4 = "id";
		p5 = 10000000;
		p6 = 127859200;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		p0 = "vfsebgjfyfgerkqlr";
		p1 = "ezbiwls";
		p2 = "kjerx";
		p3 = "jbmjvaawoxycfndukrjfg";
		p4 = "bgjfyfgerkqlrvfsebgjfyfgerkqlrvfsebgjfyfgerkqlrvfs";
		p5 = 1575724;
		p6 = 483599313;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, p5, true, p6) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
