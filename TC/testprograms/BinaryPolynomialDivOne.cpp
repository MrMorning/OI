#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

map<ll, int> f, g;

int getF(ll x) {
	if ( f.count(x) ) return f[x];
	return 0;
}

class BinaryPolynomialDivOne {
public:
	int findCoefficient(vector <int> a, long long m, long long k) {
		int n = a.size();
		f[0] = 1;
		for ( int i = 0; i < 62; i ++ ) {
			if ( m & 1 ) {
				g.clear();
				for ( int j = 0; j < n; j ++ ) {
					ll v = (k & ((1LL << (i + 1)) - 1)) + j * (1LL << (i + 1));
					g[v] = 0;
					for ( int t = 0; t < n; t ++ )
						if ( a[t] )
							g[v] ^= getF(v - t * (1LL << i));
				}
				f = g;
			}
			m >>= 1;
		}
		return getF(k);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, long long p1, long long p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	BinaryPolynomialDivOne *obj;
	int answer;
	obj = new BinaryPolynomialDivOne();
	clock_t startTime = clock();
	answer = obj->findCoefficient(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	long long p1;
	long long p2;
	int p3;
	{
		// ----- test 0 -----
		int t0[] = {1,0,1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3ll;
		p2 = 4ll;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {1,0,1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3ll;
		p2 = 5ll;
		p3 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}
	{
		// ----- test 2 -----
		int t0[] = {0,0,1,1,0,1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 7ll;
		p2 = 15ll;
		p3 = 1;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1ll;
		p2 = 0ll;
		p3 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}
	{
		// ----- test 4 -----
		int t0[] = {1,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,0,1,0,1,1,1,1,0,1,0,0,1,1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2229508454872453ll;
		p2 = 96130299655104846ll;
		p3 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
