#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class ElectionFraudDiv1 {
	public:
		vector<int> a;
		int m;
		int ceilDiv(int a, int b) { 
			if ( a % b == 0 )
				return a / b;
			return a / b + 1;
		}
		int downDiv(int a, int b) {
			if ( a % b == 0 )
				return a / b - 1;
			return a / b;
		}

		bool check(int tot) {
			static int low[55], high[55];
			int sumlow = 0, sumhigh = 0;
			for ( int i = 0; i < m; i ++ ) {
				low[i] = ceilDiv(max(0, 2 * a[i] - 1) * tot, 200);
				high[i] = downDiv((2 * a[i] + 1) * tot, 200);
				sumlow += low[i], sumhigh += high[i];
			}
			return sumlow <= tot && tot <= sumhigh;
		}	
		int MinimumVoters(vector <int> _a) {
			a = _a;
			m = a.size();
			int lower = 0, upper = 0;
			for ( int i = 0; i < m; i ++ ) {
				lower += max(0, 2 * a[i] - 1);
				upper += 2 * a[i] + 1;
			}
			if ( !(lower <= 200 && 200 < upper) )
				return -1;

			for ( int ans = 1; ; ans ++ )
				if ( check(ans) )
					return ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ElectionFraudDiv1 *obj;
	int answer;
	obj = new ElectionFraudDiv1();
	clock_t startTime = clock();
	answer = obj->MinimumVoters(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
		// ----- test 0 -----
		int t0[] = {0, 0, 0, 0, 0, 0, 0, 34, 34, 34};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = -1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
