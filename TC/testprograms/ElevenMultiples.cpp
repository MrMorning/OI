#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const int MOD = 1000000007;

void add(int &a, int b) {
	a += b;
	a %= MOD;
	if ( a < 0 ) a += MOD;
}

int mul(int a, int b) {
	return (ll)a * b % MOD;
}

class ElevenMultiples {
	public:
		int val[55], len[55];
		int bino[112][112];
		vector<int> oddNum, evenNum;
		int f[55][55][11], g[55][55][11];
		int countMultiples(vector <string> pieces) {
			memset(f, 0, sizeof(f));
			memset(g, 0, sizeof(g));
			memset(bino, 0, sizeof(bino));
			
			bino[0][0] = 1;
			for ( int i = 1; i <= 111; i ++ ) {
				bino[i][0] = 1;
				for ( int j = 1; j <= i; j ++ ) {
					add(bino[i][j], bino[i-1][j]);
					add(bino[i][j], bino[i-1][j-1]);
				}
			}

			int n = pieces.size(), m;
			for ( int i = 0; i < n; i ++ ) {
				val[i] = 0;
				len[i] = pieces[i].length();
				for ( int j = 0; j < len[i]; j ++ )
					val[i] = (val[i] * 10 + (pieces[i][j] - '0')) % 11;
				if ( len[i] & 1 )
					oddNum.push_back(val[i]);
				else
					evenNum.push_back(val[i]);
			}

			n = oddNum.size(), m = evenNum.size();
			int lft = n / 2;
			f[0][0][0] = 1;
			for ( int i = 0; i < n; i ++ )
				for ( int j = 0; j <= lft; j ++ )
					for ( int k = 0; k < 11; k ++ ) 
						if ( f[i][j][k] ) {
							if ( i - j < n - lft )
								add(f[i+1][j][(k+oddNum[i])%11], mul(n - lft - (i - j), f[i][j][k]));
							if ( j < lft ) 
								add(f[i+1][j+1][(k+11-oddNum[i])%11], mul(lft - j, f[i][j][k]));
						}
			if ( n == 0 )
				g[0][0][0] = 1;
			else {
				for ( int j = 0; j <= m; j ++ )
					for ( int k = 0; k < 11; k ++ )
						add(g[0][j][k], mul(bino[(n+1)/2+j-1][j], mul(bino[(n+2)/2+m-j-1][m-j], f[n][lft][k])));
			}

			for ( int i = 0; i < m; i ++ )
				for ( int j = 0; j <= m; j ++ )
					for ( int k = 0; k < 11; k ++ )
						if ( g[i][j][k] ) {
							if ( j ) 
								add(g[i+1][j-1][(k+11-evenNum[i])%11], mul(j, g[i][j][k]));
							if ( m-i-j > 0 )
								add(g[i+1][j][(k+evenNum[i])%11], mul(m-i-j, g[i][j][k]));
						}
			return g[m][0][0];
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	ElevenMultiples *obj;
	int answer;
	obj = new ElevenMultiples();
	clock_t startTime = clock();
	answer = obj->countMultiples(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	/*
	{
		// ----- test 0 -----
		string t0[] = {"58","2012","123"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}
	{
		// ----- test 1 -----
		string t0[] = {"1","1111","1","11"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 24;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}
	*/

	{
		// ----- test 2 -----
		string t0[] = {"214995567478742068913994"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}
	return 0;

	{
		// ----- test 3 -----
		string t0[] = {"983","4654","98","3269","861","30981"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 96;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"193","8819","40676","97625892","5719","45515667","32598836","70559374","38756","724","93391","942068","506","901150","874","895567","7560480","7427691","799450","85127"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 537147821;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"687045939630","997856158148599044","2014910234712225061","9658113323175370226","1584118137","67925153345598920","6960366756","863413844386808834","799302243562410012","44481835751","8004606814733183","19623906615609","23859998326058162","461385591582","9261878982390119","1569373294276","318106951168934","65389049931","12791173342","507877942026","3947173045690","472425746178910","524552931853595","40771812249667850232","563988469071932","28147819070","797007158858587","5716177008624223","387565700495309324","4716621063133318"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 814880650;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
