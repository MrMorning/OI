#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const int kLenMax = 2510;

class EllysString {
	public:
		vector<int> pos[26];
		int ptr[26];
		int w[2550][2550];
		int f[2550];
		int idt[kLenMax];

		void add(int i) {
			i = kLenMax - i - 1;
			for ( ; i < kLenMax; i += i & -i )
				idt[i]++;
		}

		int sum(int i) {
			i = kLenMax - i - 1;
			int ret = 0;
			for ( ; i; i -= i & -i )
				ret += idt[i];
			return ret;
		}

		string makeStr(const vector<string> ss) {
			string ret;
			FOREACH(it, ss)
				ret += *it;
			return ret;
		}
		int theMin(vector <string> _s, vector <string> _t) {
			string s = makeStr(_s),
				   t = makeStr(_t);
			int n = s.size();
			memset(w, 0x3f, sizeof(w));
			for ( int start = 0; start < n; start ++ ) {
				memset(idt, 0, sizeof(idt));
				int rev = 0;
				int fathest = start;
				memset(ptr, 0, sizeof(ptr));
				memset(pos, 0, sizeof(pos));
				for ( int i = start; i < n; i ++ )
					pos[t[i]-'a'].push_back(i);
				for ( int i = start; i < n; i ++ ) {
					int next;
				   	if ( (int)pos[s[i]-'a'].size() == ptr[s[i]-'a'] ) 
						next = n+1; 
					else next = pos[s[i]-'a'][ptr[s[i]-'a']++];
					fathest = max(fathest, next);
					rev += sum(next);
					add(next);
					if ( fathest <= i )
						w[start][i] = min(rev, i-start+1);
				}
			}

			f[0] = s[0] != t[0];
			for ( int i = 1; i < n; i ++ ) {
				f[i] = min(w[0][i], f[i-1] + 1);
				for ( int j = 0; j < i; j ++ )
					f[i] = min(f[i], f[j] + w[j+1][i]);
			}
			return f[n-1];
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	EllysString *obj;
	int answer;
	obj = new EllysString();
	clock_t startTime = clock();
	answer = obj->theMin(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	int p2;

	{
		// ----- test 0 -----
		string t0[] = {"efvmdccufdddncliwwkoxoduxuobawrezhvnevxhcloxgswrkh", "dioselqxbjkquhpntxxhbaeixcmsmnpkqujfsrnzkdajhuciqr", "wkjbshqtofsxmkzualokatwmshrgjhzsuzbzmenlbqqxmctqcp", "acjfbmeilzcgxuyxtfajheaqttpibvgdgcajkmukgtcuizdrzi", "kdvhhhwbjkqtpnzobkrdbsdgmhhjazntldcggpdivlkscbicbb", "qhwvghvorohjlpmjrlzqmzpqzjlvklylrvbytweximejvjkwoa", "avorkjhlbybzcgpljhrxdcuxfwiwplfdydzbjaipnzwjkaehoj", "kllsvnlsubqixcomoveevpqoevgabsnlwoygoyplphtabphvqr", "frbowazirjgccegnhiipkgpidysyknouywbykfgwzskhwyubhu", "ovyabzolsrkwwktqyyildjgzsvdgyigdgtyedfeaxboyuoobdv", "edydxhruccgshkwhvfdvgryymjdskclfzewazilfpuzrrqdffp", "gwtenkdpbktnaqetkwsmlbchbkivkcxgihutskgahtqitpgttf", "rzqivzoidyhipfxjdkatycyedhdnriylbnclpolsmxzhnujkfx", "lvxhpmzknfhunabljrcvegktyccylabahwxudaqabatdttgfiz", "bhezsggqxbywpkgllizpnxpofgkdfuaesuznbqfntbjdgsmuns", "baahjfwvvpehhteltfrfnmjbctecnheigbrxgucibtjoyjaqxz", "ilrxlvelbmcrantjxgwaxdffzcwuttwwcthhqxmpcnxqkwvblq", "mxuyecwqizapadnbetqurxhgigtjwhnkdwhipkghoqwztgfkgh", "adpynvmnqyqbhfcyagspixxoiwznmqvxqzmcrqgifovlopyfnx", "uunamxacxfkgjwfzfcztnrdalxcdqfmahatgacimvfkiisvzry", "wqosummyxlxisfmwreelitvncsosnmtuebtexlikvkqnwubppm", "asgurrmfqureszellkxilrrhtzviajqsxruhydqaqiawqsdlnk", "lckqkgnyxpkybeltcfaglyyzmxkyffltpihupahccvksgufvtc", "wrkuumiovfhvsdkioxzrvcjpqwrxqcyofubukwgylaekzncoiz", "ipcmryizslareyedhtktsivwmnmuwhcflwwgsrcijnfefjuldm", "qqeocmspxhjarcnjpuvmwcdfkeqhaqpdfycycxumdlwszpokmx", "jjwfjadluiluzgiivsjohpgbjuwcjlhcptmycdbfcuhhqoyqyi", "wsfcaweljzszwphcgqavmtqrijauhcugntdigjpggmfhdejpme", "qsjzaalxpuqfnmnmokeymaqexjbalriipkeqxbkbozmdithzix", "seirkqlvenctfdhsnvuakwgyiotcoqrtisatmtjgthsjihhxzm", "xelsjhuochvjeqrsnahpermuhhibhudhgpzdctemgmrlwomxlr", "ddeczlapmucjcwsehrihxywgneisebydytkmozvtvqjhcfffdt", "oqdjncblaectwacabnsokfvcbrfiiaskjdhsakoniqxxyfosfs", "vdkxlqhcccrrdcvgmchqfghmhxacckebpgsbohafplrqeqozbx", "mfrvyiwcersvwfwodwhxdqxxwkqwebcpganmfqpfeibxjpjatm", "pofbifgnpccmmevlejwbwggasankzjldklwukqpavmfdzbyido", "mtjxlddzpqbilrxqgnzodnlebhmvqkdnpwfdnvopmchidqxlhk", "xzzxbahnghwuncjmrxelopotjlbndyzeqfwtsbtnrffnftlanb", "upcidzjjfebxlvcdiogtahoktzjtkeluxaijjguglhupwymlzd", "jfjvzynozromzfbaerovrgizyipldrzclcmwalfjzavdnvrell", "bulgcasnwagfvozhggwzkqrrgsxdgyhyuvefplyggymttyagas", "qrscbrjxdwhdzsnyvfpfkvsglhzqorpcrhxnhpsirnikoedthj", "ireygqiqojdaohrxsdutoxuqynjlhwblpkjawxpixhgsfxajny", "swkcwsasjznugphdbbumvyjknuatnidticdygzpisrfftcbqlx", "zozvjgawvrfytamytenqlsgqmwcmicbbvswfvskmuczbwpiwus", "qshnffpormmfulccqkkmbnyfobbottiybbghzunzwfexlygoqo", "cqwsvjlvgztlrbmfwhkyxpkjrwqafjxpmweltktsbayuivnxky", "miglojdwlifktwxswrmmephfmlcbmpidcqzmoparlkvzwuuyal", "pxqknnjhgtaatfmxarmovmjblpputzlxmgiqxsabhhezfvxczc", "xvcjhmnkquodqyxrgimrkowcrmssizmtsfodejbkrpdxkvkoho"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"gzuawagexwxcqnxwwulgmcqbiyyksmojnedsxydxtyomjfvyvo", "llvsrfvgnnrmpgpmnkfyhqzvinxipdyplcoabdquebdcatudlt", "zdxurluduuguezwculkdrdhgahchagvxdumhhtncggzauzobrs", "ombqsknmudygtmjelwniprrfvtwmfhbbuolmhahtyoxklvkayb", "nkhnytiiwxffmcrujrxnphpddaxdjpbrszptogdzsijoptdvcc", "mmnhfdjpiaaxircxctlmoettchxqmmpgmkmxcvpyipntdgtalg", "zqckvgpcctzvqyyliheoztxobufaaiqwirdlyidyazzpolgaqn", "gqycfekbtjeqdssmebwjaghgnreikhwwvqizdqcpvqvxdlipmu", "kyxmgcnglusuidtpjcxpchmgugvthklsipllnfumvflqtkkpjw", "mihhgvmsntsdoiihtcfkyxzlxpwakeatfpqfedivsgkpofnszs", "ayxuztofiadwiqsvhgmhwcfhgpkldbonkwviwvrbxtczasvtky", "ginawvhzdftnmhymkbzkcnxkvujrbblspjfpwiojzeeobewwhm", "cuobdgmnieabzcmqpsarhfxtfemjgcjcbkgoqhztnbzsspfhiq", "osamlwqvpmtijhepprxmgwodvauknbietoxfhzsygsnaznhsjp", "cgwtnrzowwkdvzgxqctvqlxjqamhembcrfplrjxmbyausqkbee", "rbbhntrjdujndpgmvvgmrgbchlztlkcxlaxbatpzhxfaibfuzn", "gtxvwmlnxljfyrgspumvrvlmrklecoxabzliojjtosoaciqqha", "cfeityfveqcgdhwmavzmnmltwteygfnqogbcfivsykdllaptey", "hxdqksczzhwlunjxuzkjkhzqjtwaegvjlyrkaufstsixykgihp", "pcjpserbhqomfaylcmyfgftkokcdbzqapipxnabpcbjprxmexh", "ooehknaaychkrrquctwhnonkxyhwmnrzsbcfkqxmqolfqleamh", "wpkhetttwxkyqfitycqnsxokqbvbagljjpzverfesfmwthxznw", "vnjesnjdhevbbshuxlrmkgbpqrjbcwrmfloyswjzxjtxawlzio", "hktqabbvgekelwqsrbnlrychllgkfxdefycsxsaukcidfutlry", "bnhxoawpxkrvlwlxxpibfujzamsunnhgmibwiucwygvaekfslo", "cdxrchcwckyduzaqxcbzlbehpunippmlhvkuitjkwmageavyft", "bpqnqpaumjfhyqivdgwawgmdsnslsvitbiwmyexhwkgoftwadf", "hsdwfeikdyrrzjdffxodstzakyhgpivqlmjppflncgauomimvc", "bmgynkthbzilvikbdvfbxbifadxflfipkofodjzvjudpfvdqcu", "godfiygtnmpxrrugjgafihfpatihoqhjzqzrrbdssqzjhjqgln", "usndzyobfacjfylhotskvcepxcilgtieikldclzlbwzkgkzsrq", "tztmvimjjhitpszhguqbeqnladfxwgetehogzhecfuixhwwcvb", "jnbjjrewluusxxomhfugqcyjslczyirzyaejwdsffcldutwdao", "bofwbkndkdmlwkhuvauileaoketmziggzvrrdcvcthahqypwyw", "erakimcvrklcxdvozbzzehutoxigsgembxureneneueyloaell", "icaqwdlobgshnmvxlglpymaskovamzdbowmrfjnosjaldpumif", "lcydldvkyczqhlzntvccsqendlqtppgjacubosjkvsfhpxcurx", "jqdehdecfzjgdgniwerslpdlvrakfbuibghmcmhghbykybijyk", "cagizxzjqklfxrrdkfvhfksqhbwxkiigtkvdzjwifjroflzanv", "ojvpyfrrgynqyfbfswdppzkjzfmmswsexqxckwyvdnciuohgwi", "scophwgoptcicqxjfezcqiccoqmzncskhkcmklrhihwkpsxvuo", "pfaeiujvnsdbhzrjszoatacuqgjxjsxbwsjwraqqylbsrshbta", "dbrabgbejrxqchyuylgqmrfurtavbeoivrestroaywbdwcwesc", "kjzhcovvicdlqskliiaofutqjcfowkiuernjnbxlazmrikyudr", "ipcznhtylyxyhrqgydtciqwkvyqukuftbhcvwjlhlruohlhhwm", "wcpijardajfrghipemubnhmeinllmlhfqxewqxwzdyrjjwjook", "hxyguixgdaqnqywrvzondwtwcipkibxyiytqbkohsdzqxoqtzf", "wzqqhaucqtofmlzuaqmanapflxjdgfexfukhcrtcqobganfmja", "zprwxsrdefrzhmsnowmmfdjgojqhbqnjeisdrchamnpgmplibm", "bgreasaxxlkpktcgcyewlsnodtatxfchulxnuizjckwzxjqepq"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2417;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	return 0;
	{
		// ----- test 1 -----
		string t0[] = {"unagi"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"nugai"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"ellys","string"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"e","ll","ysst","ring"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"fox"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"xfo"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"salmon"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"camlon"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"boajxuidva"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"jcayduvida"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 6;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		string t0[] = {"vykdnujyezbcbmnatipqfuxqmgkvtn"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"qokbqyujeqcbwsinatupqfoegmvkdz"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 22;
		all_right = KawigiEdit_RunTest(6, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
