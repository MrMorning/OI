#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const int MOD = 1000000009;

int powMod(int a, int n) {
	int res = n & 1 ? a : 1;
	for ( n >>= 1; n; n >>= 1 ) {
		a = (ll)a * a % MOD;
		if ( n & 1 )
			res = (ll)res * a % MOD;
	}
	return res;
}

int perm[666];
bool vis[666];
int f[666];
int fact[666], bino[666][666];

ll calc4(int l, int n) {
	if ( n % 4 != 0 ) return 0;
	ll res = powMod(fact[n/4], MOD - 2);
	for ( int k = n; k >= 4; k -= 4 )
		res = res * ((ll)bino[k][4] * l % MOD * l % MOD * l % MOD * 6 % MOD) % MOD;
	return res;
}

ll calc2(int l, int n) {
	if ( n % 2 != 0 ) return 0;
	ll res = powMod(fact[n/2], MOD - 2);
	for ( int k = n; k >= 2; k -= 2 )
		res = res * ((ll)bino[k][2] * l % MOD) % MOD;
	return res;
}

class FleaCircus {
	public:
		int countArrangements(vector <string> afterFourClicks) {
			stringstream ss;
			FOREACH(it, afterFourClicks)
				ss << *it;
			int n = 0;
			while ( ss >> perm[n] )
				n++;
			memset(vis, 0, sizeof(vis));
			memset(f, 0, sizeof(f));
			for ( int i = 0; i < n; i ++ )
				if ( !vis[i] ) {
					vis[i] = true;
					int cnt = 1;
					int j = perm[i];
					while ( j != i ) {
						vis[j] = true;
						cnt++;
						j = perm[j];
					}
					f[cnt]++;
				}

			for ( int i = 0; i <= 655; i ++ ) {
				bino[i][0] = 1;
				for ( int j = 1; j <= i; j ++ )
					bino[i][j] = (bino[i-1][j-1] + bino[i-1][j])%MOD;
			}
			fact[0] = 1;
			for ( int i = 1; i <= 655; i ++ )
				fact[i] = (ll)fact[i - 1] * i % MOD;

			ll ans = 1;
			for ( int x = 1; x <= n; x ++ ) 
				if ( f[x] > 0 ) {
					if ( x % 2 == 0 ) 
						ans = ans * calc4(x, f[x]) % MOD;
					else {
						ll tmp = 0;
						for ( int a4 = 0; 4 * a4 <= f[x]; a4 ++ )
							for ( int a2 = 0; 4 * a4 + 2 * a2 <= f[x]; a2 ++ ) 
								tmp = (tmp + ((ll)bino[f[x]][a2 * 2] * calc2(x, a2 * 2) % MOD) 
											* ((ll)bino[f[x]-a2*2][a4 * 4] * calc4(x, a4 * 4) % MOD)) % MOD;
						ans = ans * tmp % MOD;
					}
				}
			return ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FleaCircus *obj;
	int answer;
	obj = new FleaCircus();
	clock_t startTime = clock();
	answer = obj->countArrangements(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;

	
	{
		// ----- test 0 -----
		string t0[] = {"1 2 0 3"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"1 2 ","0 3"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"0 1 2"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}
//	return 0;
	{
		// ----- test 3 -----
		string t0[] = {"0 1 2 3 5 4"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"3 6 7 9 8 2 1","0 5 1 0 4"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 4;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}
	

	{
		// ----- test 5 -----
		string t0[] = {"431 188 112 361 294 232 226 306 34 286 253 430 56 ", "331 152 110 93 275 316 263 218 195 432 419 121 271", " 405 346 28 396 191 49 480 33 72 82 3 259 413 107 ", "15 305 452 207 59 299 422 175 256 131 60 287 366 5", "3 339 423 245 125 359 293 440 25 258 477 277 401 8", " 337 13 437 248 368 398 353 466 444 246 355 289 0 ", "123 104 81 229 393 376 114 167 133 370 179 143 22 ", "243 57 95 454 403 10 79 273 318 146 340 417 214 16", "0 172 202 447 449 382 199 310 260 196 210 216 138 ", "61 122 302 304 159 303 373 126 100 24 438 193 194 ", "338 427 124 280 463 36 255 134 1 221 238 462 120 4", "11 47 237 397 234 365 233 395 173 217 328 384 161 ", "354 99 85 412 469 90 336 170 5 264 450 387 369 178", " 459 301 212 102 70 321 409 389 326 180 351 103 22", "7 43 105 27 399 231 108 187 35 68 435 241 478 283 ", "265 347 205 197 434 222 479 164 476 300 190 324 12", "9 235 254 379 77 9 176 475 410 276 211 267 141 408", " 20 436 98 158 189 317 349 63 374 66 464 375 220 1", "28 295 136 426 37 78 209 314 470 474 76 251 311 30", "8 247 155 482 278 392 156 383 38 21 213 400 457 43", "9 281 116 42 12 83 465 327 109 230 101 415 252 30 ", "168 174 404 262 87 282 74 448 96 142 332 225 54 41", " 371 91 185 323 388 451 64 127 341 44 456 418 390 ", "18 290 364 345 14 274 52 261 298 208 357 433 113 4", "21 312 73 7 92 145 86 236 460 406 360 330 65 441 1", "30 362 165 26 313 429 89 284 420 171 151 250 343 4", "53 2 219 416 348 473 67 201 367 372 75 186 69 118 ", "88 204 363 307 215 270 320 228 144 291 242 333 244", " 19 257 97 377 16 106 461 292 394 39 169 140 322 7", "1 279 198 266 51 149 139 407 350 23 46 428 29 414 ", "45 483 249 424 458 385 471 40 455 391 50 181 224 3", "2 269 315 148 309 137 329 147 84 48 344 4 55 240 4", "25 192 17 342 132 184 80 177 119 335 6 443 162 386", " 352 206 358 442 468 296 381 94 62 200 115 297 11 ", "445 268 272 183 153 135 402 288 285 481 58 239 163", " 157 182 467 380 356 203 446 472 325 117 111 223 1", "50 334 378 319 166 31 154"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 958004148;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
