#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
double key[55];
bool cmpKey(int i, int j) {
	return key[i] < key[j];
}
class FoxAndBusiness {
	public:
		int arr[55];
		double minimumCost(int K, int totalWork, vector <int> a, vector <int> p) {
			int n = a.size();
			double lb = 0, rb = 1e12, mid;
			for ( int i = 0; i < n; i ++ )
				arr[i] = i;
			int cnt = 0;
			for ( mid = (lb + rb) / 2; cnt < 200; cnt ++, mid = (lb + rb) / 2 ) {
				for ( int i = 0; i < n; i ++ )
					key[i] = (double)a[i] * p[i] * totalWork - a[i] * mid;
				sort(arr, arr + n, cmpKey);
				double g = 3600.0 * totalWork * K;
				for ( int i = 0; i < K; i ++ )
					g += key[arr[i]];

				if ( g < 0 )
					rb = mid;
				else
					lb = mid;
			}
			return mid;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <int> p2, vector <int> p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	FoxAndBusiness *obj;
	double answer;
	obj = new FoxAndBusiness();
	clock_t startTime = clock();
	answer = obj->minimumCost(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	vector <int> p2;
	vector <int> p3;
	double p4;
/*
	{
		// ----- test 0 -----
		p0 = 1;
		p1 = 10;
		int t2[] = {10};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {20};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 3800.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 1;
		p1 = 100;
		int t2[] = {50,60};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {1000,2000};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 107200.0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}
*/
	{
		// ----- test 2 -----
		p0 = 2;
		p1 = 300;
		int t2[] = {10,20,47};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {15,20,98765};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 77500.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 4;
		p1 = 1000;
		int t2[] = {1,2,3,4,5,6,7,8,9,10};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {20,30,40,58,60,70,80,90,100,150};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 531764.705882353;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
