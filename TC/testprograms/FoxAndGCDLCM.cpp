#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

ll p[25], low[25], high[25];
int nP;

void prework(ll n) {
	for ( int x = 2; (ll)x * x <= n; x ++ )
		if ( n % x == 0 ) {
			p[nP++] = x;
			while ( n % x == 0 )
				n /= x;
		}
	if ( n > 1 )
		p[nP++] = n;
}

class FoxAndGCDLCM {
	public:
		long long get(long long G, long long L) {
			prework(G);
			prework(L);
			sort(p, p + nP);
			nP = unique(p, p + nP) - p;
			for ( int i = 0; i < nP; i ++ ) {
				ll tmp = G;
				low[i] = 1;
				while ( tmp % p[i] == 0 ) {
					low[i] *= p[i];
					tmp /= p[i];
				}

				tmp = L;
				high[i] = 1;
				while ( tmp % p[i] == 0 ) {
					high[i] *= p[i];
					tmp /= p[i];
				}
			}

			for ( int i = 0; i < nP; i ++ )
				if ( high[i] < low[i] ) return -1;

			ll ans = 0x3f3f3f3f3f3f3f3fLL;
			for ( int s = 0, lim = 1 << nP; s < lim; s ++ ) {
				ll x = 1, y = 1;
				for ( int k = 0; k < nP; k ++ )
					if ( s & (1 << k) )
						x *= high[k], y *= low[k];
					else
						x *= low[k], y *= high[k];
				ans = min(ans, x + y);
			}
			return ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FoxAndGCDLCM *obj;
	long long answer;
	obj = new FoxAndGCDLCM();
	clock_t startTime = clock();
	answer = obj->get(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	long long p1;
	long long p2;

	{
		// ----- test 0 -----
		p0 = 2ll;
		p1 = 20ll;
		p2 = 14ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 5ll;
		p1 = 8ll;
		p2 = -1ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 1000ll;
		p1 = 100ll;
		p2 = -1ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 100ll;
		p1 = 1000ll;
		p2 = 700ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 10ll;
		p1 = 950863963000ll;
		p2 = 6298430ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
