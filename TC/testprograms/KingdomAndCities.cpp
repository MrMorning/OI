#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)
#define plus pplus

using namespace std;
typedef long long ll;

const int MOD = 1000000007;

void add(int &a, int b) {
	a += b;
	a %= MOD;
	if ( a < 0 ) a += MOD;
}

int plus(int a, int b) {
	add(a, b);
	return a;
}

int mul(int a, int b) {
	return (int)((ll)a * b % MOD);
}

class KingdomAndCities {
	public:
		int bino[2501][51];
		int f[51][51], g[51][51];

		int eval0(int N, int K) {
			memset(g, 0, sizeof(g));
			for ( int n = 1; n <= N; n ++ ) {
				memset(f, 0, sizeof(f));
				for ( int i = 1; i < n; i ++ ) {
					for ( int j = 0; j <= min(bino[n][2], K); j ++ ) 
						for ( int k = 0; k <= j; k ++ )
							add(f[i][j], mul(bino[n-1][i-1], mul(g[i][k], bino[bino[n-i][2]][j-k])));
				}
				for ( int j = 0; j <= min(bino[n][2], K); j ++ ) {
					g[n][j] = bino[bino[n][2]][j];
					for ( int k = 1; k < n; k ++ )
						add(g[n][j], -f[k][j]);
				}
			}

			return g[N][K];
		}

		int eval1(int N, int K) {
			if ( K < 1 ) return 0;
			int ret = 0;
			add(ret, mul(eval0(N-1, K-1), K-1));
			if ( K >= 2 )
				add(ret, mul(eval0(N-1, K-2), K-2));
			return ret;
		}

		int eval2(int N, int K) {
			//special judge
			if ( K == 2 ) 
				return 0;
			int ret = 0;
			add(ret, mul(eval1(N-1, K-1), K-3));
			if ( K >= 4 )
				add(ret, mul(eval1(N-1, K-2), K-4));

			add(ret, mul(2, mul(eval0(N-2, K-2), K-2)));
			add(ret, mul(2, mul(eval0(N-2, K-3), K-3)));
			add(ret, mul(eval0(N-2, K-3), N-2));
			return ret;
		}

		int howMany(int N, int M, int K) {
			memset(bino, 0, sizeof(bino));

			bino[0][0] = 1;
			for ( int i = 1; i <= 2500; i ++ ) {
				bino[i][0] = 1;
				for ( int j = 1; j <= 50; j ++ )
					bino[i][j] = plus(bino[i-1][j], bino[i-1][j-1]);
			}
			if ( M == 0 ) return eval0(N, K);
			else if ( M == 1 ) return eval1(N, K);
			else return eval2(N, K);
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	KingdomAndCities *obj;
	int answer;
	obj = new KingdomAndCities();
	clock_t startTime = clock();
	answer = obj->howMany(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
/*
	{
		// ----- test 0 -----
		p0 = 3;
		p1 = 0;
		p2 = 3;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 4;
		p1 = 1;
		p2 = 4;
		p3 = 9;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 5;
		p1 = 2;
		p2 = 11;
		p3 = 0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}
*/
	{
		// ----- test 3 -----
		p0 = 2;
		p1 = 0;
		p2 = 1;
		p3 = 1;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 10;
		p1 = 2;
		p2 = 20;
		p3 = 150810825;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
