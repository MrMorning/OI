#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
ll calc(ll K, ll B) {
	if ( B < K ) return 0LL;
	ll ans = 0;
	for ( int delta = 0; (K << delta) <= B; delta++ ) {
		ll lb = K << delta,
		   rb = min(B, lb + (1LL << delta) - 1);
		ans += rb - lb + 1;
	}
	return ans;
}
ll solve(ll K, ll B) {
	if ( K & 1 ) return calc(K, B);
	else return calc(K, B) + calc(K + 1, B);
}
class KleofasTail {
	public:
		long long countGoodSequences(long long K, long long A, long long B) {
			if ( K == 0 )
				return B - A + 1;
			return solve(K, B) - solve(K, A-1);
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, long long p2, bool hasAnswer, long long p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	KleofasTail *obj;
	long long answer;
	obj = new KleofasTail();
	clock_t startTime = clock();
	answer = obj->countGoodSequences(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	long long p0;
	long long p1;
	long long p2;
	long long p3;

	{
		// ----- test 0 -----
		p0 = 3ll;
		p1 = 4ll;
		p2 = 8ll;
		p3 = 2ll;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 1ll;
		p1 = 23457ll;
		p2 = 123456ll;
		p3 = 100000ll;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 1234567890123456ll;
		p1 = 10ll;
		p2 = 1000000ll;
		p3 = 0ll;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 0ll;
		p1 = 0ll;
		p2 = 2ll;
		p3 = 3ll;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 2ll;
		p1 = 3ll;
		p2 = 3ll;
		p3 = 1ll;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 13ll;
		p1 = 12345ll;
		p2 = 67890123ll;
		p3 = 8387584ll;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
