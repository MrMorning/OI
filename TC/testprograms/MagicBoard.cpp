#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

class MagicBoard {
public:
	bool vis[100010];
	int id[55][55];
	vector<int> row[55], col[55], adj[100010];
	void dfs(int x) {
		vis[x] = true;
		FOREACH(it, adj[x])
			if ( !vis[*it] )
				dfs(*it);
	}
	string ableToUnlock(vector <string> board) {
		int n = board.size(), m = board[0].size();
		int nv = 0;
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ )
				if ( board[i][j] == '#' ) {
					id[i][j] = nv++;
					row[i].push_back(id[i][j]);
					col[j].push_back(id[i][j]);
				}
		for ( int i = 0; i < n; i ++ ) {
			int sz = row[i].size();
			for ( int j = 0; j < sz; j ++ )
				for ( int k = 0; k < sz; k ++ )
					if ( j != k )
						adj[row[i][j]].push_back(row[i][k]);
		}
		for ( int i = 0; i < m; i ++ ) {
			int sz = col[i].size();
			for ( int j = 0; j < sz; j ++ )
				for ( int k = 0; k < sz; k ++ )
					if ( j != k )
						adj[col[i][j]].push_back(col[i][k]);
		}
		memset(vis, 0, sizeof(vis));
		dfs(0);
		for ( int i = 0; i < nv; i ++ )
			if ( !vis[i] )
				return "NO";
		int oddCnt = 0;
		bool oddRight = false;
		for ( int i = 0; i < n; i ++ ) {
			if ( row[i].size() & 1 ) 
				oddCnt++;
		}
		for ( int i = 0; i < m; i ++ ) {
			if ( col[i].size() & 1 )
				oddCnt++, oddRight = true;
		}
		if ( oddCnt == 0 || (oddCnt==2 && oddRight) )
			return "YES";
		return "NO";
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, string p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	MagicBoard *obj;
	string answer;
	obj = new MagicBoard();
	clock_t startTime = clock();
	answer = obj->ableToUnlock(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p1 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	string p1;

	{
		// ----- test 0 -----
		string t0[] = {"##",".#"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"#.",".#"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "NO";
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		string t0[] = {"##","##","##"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"###","###","###"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "NO";
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"###","..#","###","#..","###"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "NO";
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"................",".######..######.",".######..######.",".##......##..##.",".##......##..##.",".######..######.",".######..######.",".....##..##..##.",".....##..##..##.",".######..######.",".######..######.","................"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		string t0[] = {"#"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = "YES";
		all_right = KawigiEdit_RunTest(6, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
