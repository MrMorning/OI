#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const int kStateMax = 1594323;
int powTri[14];
int memo[kStateMax];
bool done[kStateMax];
bool okay[kStateMax];
int nWiz;
pair<int, int> wiz[13];

int getbit(int s, int i) {
	return s / powTri[i] % 3;
}

int setbit(int s, int i, int x) {
	s -= getbit(s, i) * powTri[i];
	s += powTri[i] * x;
	return s;
}

void expand(int s) {
	if ( okay[s] ) return;
	okay[s] = true;
	for ( int i = 0; i < nWiz; i ++ )
		if ( getbit(s, i) != 0 ) 
			expand(setbit(s, i, 0));
}

int dfs(int s, int lft) {
	assert(okay[s]);
	if ( done[s] ) return memo[s];
	done[s] = true;
	int &ret = memo[s] = 0;
	if ( lft == 0 ) return ret = 0;
	for ( int i = 0; i < nWiz; i ++ )
		if ( getbit(s, i) == 0 ) {
			int ns1 = setbit(s, i, 1),
				ns2 = setbit(s, i, 2);
			if ( okay[ns1] && okay[ns2] ) 
				ret = max(ret, min(dfs(ns1, lft-1), dfs(ns2, lft-1) + 1));
			else if ( okay[ns1] ) 
				ret = max(ret, dfs(ns1, lft-1));
			else if ( okay[ns2] )
				ret = max(ret, dfs(ns2, lft-1) + 1);
		}
	return ret;
}

class MagicalHats {
	public:
		int countbits(int s) {
			int ret = 0;
			while ( s ) {
				ret += s & 1;
				s >>= 1;
			}
			return ret;
		}
		int rhat[13], chat[13], rcnt[13], ccnt[13];
		int findMaximumReward(vector <string> board, vector <int> coins, int numGuesses) {
			powTri[0] = 1;
			for ( int i = 1; i <= 13; i ++ )
				powTri[i] = powTri[i-1] * 3;
			memset(okay, 0, sizeof(okay));
			memset(done, 0, sizeof(done));
			memset(rhat, 0, sizeof(rhat));
			memset(chat, 0, sizeof(chat));
			nWiz = 0;

			int H = board.size(), W = board[0].size();
			for ( int i = 0; i < H; i ++ )
				for ( int j = 0; j < W; j ++ )
					if ( board[i][j] == 'H' ) {
					   wiz[nWiz++] = make_pair(i, j);	
					   rhat[i]^=1, chat[j]^=1;
					}
			int nCoin = coins.size();
			for ( int s = 0, lim = 1 << nWiz; s < lim; s ++ )
				if ( countbits(s) == nCoin ) {
					for ( int i = 0; i < H; i ++ )
						rcnt[i] = rhat[i];
					for ( int i = 0; i < W; i ++ )
						ccnt[i] = chat[i];
					for ( int i = 0; i < nWiz; i ++ )
						if ( s & (1 << i) ) {
							rcnt[wiz[i].first]^=1;
							ccnt[wiz[i].second]^=1;
						}
					bool succ = true;
					for ( int i = 0; i < H; i ++ )
						succ &= rcnt[i] == 0;
					for ( int i = 0; i < W; i ++ )
						succ &= ccnt[i] == 0;

					if ( succ ) {
						int ns = 0;
						for ( int i = 0; i < nWiz; i ++ )
							ns = setbit(ns, i, ((s & (1 << i)) > 0) + 1);
						expand(ns);
					}
				}

			if ( !okay[0] ) return -1;
			int maxCoinsGet = dfs(0, numGuesses);
			sort(coins.begin(), coins.end());
			int ret = 0;
			for ( int i = 0; i < maxCoinsGet; i ++ )
				ret += coins[i];
			return ret;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <int> p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << p2;
	cout << "]" << endl;
	MagicalHats *obj;
	int answer;
	obj = new MagicalHats();
	clock_t startTime = clock();
	answer = obj->findMaximumReward(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <int> p1;
	int p2;
	int p3;
	{
		// ----- test 0 -----
		string t0[] = {"H"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {1};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1;
		p3 = 1;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"HHH","H.H","HH."};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {9};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 1;
		p3 = 9;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}
	{
		// ----- test 2 -----
		string t0[] = {"HH","HH"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {1,2,3,4};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 3;
		p3 = 6;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}


	{
		// ----- test 3 -----
		string t0[] = {"HHH","HHH","H.H"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {13,13,13,13};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 2;
		p3 = 13;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"HHH","HHH","H.H"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {13,13,13,13};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 3;
		p3 = 26;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		string t0[] = {"H.H.",".H.H","H.H."};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {17};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 6;
		p3 = -1;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 6 -----
		string t0[] = {"HHH","H.H","HHH","H.H","HHH"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {33,337,1007,2403,5601,6003,9999};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 5;
		p3 = 1377;
		all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 7 -----
		string t0[] = {".............",".............",".............",".............",".............",".............",".....H.H.....","......H......",".....H.H.....",".............",".............",".............","............."};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		int t1[] = {22};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		p2 = 3;
		p3 = 22;
		all_right = KawigiEdit_RunTest(7, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
