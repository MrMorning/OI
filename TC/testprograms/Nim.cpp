#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
#define plus pls123

const int MOD = 1000000007;
const int kLenMax = 1 << 16;

bool notprime[kLenMax];
int A[kLenMax], B[kLenMax], C[kLenMax], resA[kLenMax], resB[kLenMax], tmp[kLenMax];
int kInvTwo;

int mul(int a, int b) {
	return (ll)a * b % MOD;
}

int plus(int a, int b) {
	a += b;
	a %= MOD;
	if ( a < 0 )
		a += MOD;
	return a;
}

int powMod(int a, int n) {
	a %= MOD;
	int res = n & 1 ? a : 1;
	for ( n >>= 1; n; n >>= 1 ) {
		a = mul(a, a);
		if ( n & 1 )
			res = mul(a, res);
	}
	return res;
}

void prework(int L) {
	memset(notprime, 0, sizeof(notprime));
	notprime[0] = notprime[1] = true;
	for ( int x = 2; x <= L; x ++ ) 
		if ( !notprime[x] ) 
			for ( int y = x + x; y <= L; y += x )
				notprime[y] = true;
}

void tf(int *res, int *A, int l, int r) {
	if ( l == r ) { res[l] = A[l]; return; }
	int mid = (l + r) / 2, len = (r - l + 1) / 2;
	tf(res, A, l, mid);
	tf(res, A, mid + 1, r);
	for ( int k = l; k <= mid; k ++ ) {
		tmp[k] = plus(res[k], -res[k + len]);
		tmp[k + len] = plus(res[k], res[k + len]);
	}
	for ( int k = l; k <= r; k ++ )
		res[k] = tmp[k];
}

void utf(int *res, int l, int r) {
	if ( l == r ) { return; }
	int mid = (l + r) / 2, len = (r - l + 1) / 2;
	for ( int k = l; k <= r; k ++ ) tmp[k] = res[k];
	for ( int k = l; k <= mid; k ++ ) {
		res[k] = mul(plus(tmp[k], tmp[k + len]), kInvTwo);
		res[k + len] = mul(plus(tmp[k + len], -tmp[k]), kInvTwo);
	}
	utf(res, l, mid);
	utf(res, mid + 1, r);
}

class Nim {
	public:
		int count(int K, int L) {
			kInvTwo = powMod(2, MOD - 2);
			int t = 1;
			while ( t < L + 1 ) t <<= 1;
			prework(L);
			memset(A, 0, sizeof(A));
			A[0] = 1;
			memset(B, 0, sizeof(B));
			for ( int i = 0; i <= L; i ++ )
				B[i] = !notprime[i];
			tf(resA, A, 0, t - 1);
			tf(resB, B, 0, t - 1);
			for ( int i = 0; i < t; i ++ )
				resB[i] = powMod(resB[i], K);
			for ( int i = 0; i < t; i ++ )
				C[i] = mul(resA[i], resB[i]);
			utf(C, 0, t - 1);
			return C[0];
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	Nim *obj;
	int answer;
	obj = new Nim();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;

	{
		// ----- test 0 -----
		p0 = 3;
		p1 = 7;
		p2 = 6;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 4;
		p1 = 13;
		p2 = 120;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 10;
		p1 = 100;
		p2 = 294844622;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 123456789;
		p1 = 12345;
		p2 = 235511047;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
