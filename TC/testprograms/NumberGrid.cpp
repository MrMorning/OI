#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
const int MOD = 1000000007;

vector<string> noSol() {
	return vector<string>(1, "NO SOLUTIONS");
}

class NumberGrid {
public:
	int a[55][55], b[55][55];
	int sc[55], sr[55];
	int f[55][55 * 9], g[55][55 * 9];
	int n, m;
	vector<string> output() {
		bool okay = true;
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ ) {
				int sum = 0;
				for ( int x = 0; x < m; x ++ )
					sum += a[i][x];
				for ( int x = 0; x < n; x ++ )
					sum += a[x][j];
				sum -= a[i][j];
				okay &= sum == b[i][j];
			}
		if ( !okay ) 
			return noSol();
		vector<string> res(n, string(m, '?'));
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ ) {
				if ( a[i][j] < 0 || a[i][j] > 9 ) 
					return noSol();
				res[i][j] = (char)('0' + a[i][j]);
			}
		return res;
	}
	vector <string> decrypt(vector <string> hundreds, vector <string> tens, vector <string> ones) {
		n = hundreds.size(), m = hundreds[0].size();
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ )
				b[i][j] = (int)(hundreds[i][j]-'0') * 100 + (int)(tens[i][j]-'0') * 10 + (int)(ones[i][j]-'0');
		int tot = 0;
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ )
				tot += b[i][j];
		if ( tot % (n + m - 1) != 0 ) return noSol();
		tot /= (n + m - 1);

		if ( tot == 0 || tot == 9 * n * m ) {
			for ( int i = 0; i < n; i ++ )
				for ( int j = 0; j < m; j ++ )
					a[i][j] = tot == 0 ? 0 : 9;

			return output();
		} 

		if ( n == 1 && m == 1 ) {
			a[0][0] = b[0][0];
			return output();
		} else if ( n == 1 || m == 1 ) {
			if ( m == 1 ) {
				m = n;
				for ( int i = 0; i < n; i ++ )
					b[0][i] = b[i][0];
			}

			for ( int i = 0; i < m; i ++ )
				if ( b[0][i] != b[0][0] ) return noSol();

			f[0][0] = 1;
			g[0][0] = 1;
			for ( int i = 0; i < m; i ++ )
				for ( int j = tot; j >= 0; j -- )
					for ( int k = 0; k <= 9; k ++ )
						if ( j >= k ) {
							f[i+1][j] = (f[i+1][j] + f[i][j - k]) % MOD;
							g[i+1][j] |= g[i][j-k];
						}
			if ( !g[m][tot] ) return noSol();
			stringstream ss;
			ss << f[m][tot] << " SOLUTIONS";
			return vector<string>(1, ss.str());
		}
		for ( int i = 0; i < n; i ++ ) {
			sr[i] = 0;
			for ( int j = 0; j < m; j ++ )
				sr[i] += b[i][j];
			sr[i] -= tot;
			if ( sr[i] % (m - 1) != 0 )
				return noSol();
			sr[i] /= m - 1;
		}
		for ( int j = 0; j < m; j ++ ) {
			sc[j] = 0;
			for ( int i = 0; i < n; i ++ )
				sc[j] += b[i][j];
			sc[j] -= tot;
			if ( sc[j] % (n - 1) != 0 ) 
				return noSol();
			sc[j] /= n - 1;
		}
		for ( int i = 0; i < n; i ++ )
			for ( int j = 0; j < m; j ++ ) 
				a[i][j] = sr[i] + sc[j] - b[i][j];
		return output();
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, vector <string> p2, bool hasAnswer, vector <string> p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	NumberGrid *obj;
	vector <string> answer;
	obj = new NumberGrid();
	clock_t startTime = clock();
	answer = obj->decrypt(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << "\"" << p3[i] << "\"";
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << answer[i] << "\"";
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <string> p1;
	vector <string> p2;
	vector <string> p3;

	{
		// ----- test 0 -----
		string t0[] = {"000","000"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"001","111"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"691","457"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = {"013","257"};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"0"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"0"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"3"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = {"3"};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}


	{
		// ----- test 2 -----
		string t0[] = {"0"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {"4"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {"2"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = {"NO SOLUTIONS"};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {
			"3333","01111111111100110011111110000110111111001111111110","01111111111100110011111110000110111111001111111110","01111111111100110011111110000110111111001111111110"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		string t1[] = {
			"6540","70110005571188118912220229999229226334990115683217","70110005571188118912220229999229226334990115683217","70110005571188118912220229999229226334990115683217"};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		string t2[] = {
			"5849","16336665563355335937776002299009772441996335234731","16336665563355335937776002299009772441996335234731","16336665563355335937776002299009772441996335234731"};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		string t3[] = {
			"8881","11111111111111111111111111111111111111111111111111","11111111111111111111111111111111111111111111111111","11111111111111111111111111111111111111111111111111"};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
