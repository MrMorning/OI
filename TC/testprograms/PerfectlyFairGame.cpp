#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const int DELTA = 200;
vector<string> board;
double memo[21][400][2];
bool done[21][400][2];
int darts;
int H, W;

double dp(int i, int j, int s) {
	assert(-200 <= j && j < 200);
	if ( done[i][j+DELTA][s] ) 
		return memo[i][j+DELTA][s];
	done[i][j+DELTA][s] = true;
	double &ret = memo[i][j+DELTA][s] = 0;
	if ( i == darts ) {
		if ( j > 0 ) ret = 1;
		else if ( j == 0 ) ret = 0.5;
		else ret = 0;
		return ret;
	}
	if ( s == 0 ) {
		for ( int x = 0; x < H - 2; x ++ )
			for ( int y = 0; y < W - 2; y ++ ) {
				double tmp = 0;
				for ( int dx = 0; dx < 3; dx ++ )
					for ( int dy = 0; dy < 3; dy ++ )
						tmp += 1.0 / 9  * dp(i, j + (board[x+dx][y+dy]-'0'), 1);
				tmp = 1 - tmp;
				ret = max(ret, tmp);
			}
	} else {
		for ( int x = 0; x < H - 2; x ++ )
			for ( int y = 0; y < W - 2; y ++ ) {
				double tmp = 0;
				for ( int dx = 0; dx < 3; dx ++ )
					for ( int dy = 0; dy < 3; dy ++ )
						tmp += 1.0 / 9  * dp(i + 1, j - (board[x+dx][y+dy]-'0'), 0);
				tmp = 1 - tmp;
				ret = max(ret, tmp);
			}
	}
	return ret;
}

class PerfectlyFairGame {
	public:
		double winChance(vector <string> _board, int _darts) {
			memset(done, 0, sizeof(done));
			board = _board;
			darts = _darts;
			H = board.size(), W = board[0].size();
			return 1 - dp(0, 0, 0);
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, int p1, bool hasAnswer, double p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	PerfectlyFairGame *obj;
	double answer;
	obj = new PerfectlyFairGame();
	clock_t startTime = clock();
	answer = obj->winChance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p2 - answer) <= 1e-9 * max(1.0, fabs(p2));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	int p1;
	double p2;
	{
		// ----- test 0 -----
		string t0[] = {"123","456","789"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 10;
		p2 = 0.5;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		string t0[] = {"55555","55555","55555","55555","55555"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 20;
		p2 = 0.5;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}
	{
		// ----- test 2 -----
		string t0[] = {"0909","9090","0909","9090"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 20;
		p2 = 0.5;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		string t0[] = {"888","808","888","000","000","999","999"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		p2 = 0.537037037037037;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		string t0[] = {"29368","65609","67539","57982","71709"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 5;
		p2 = 0.5440401329247544;
		all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
		// ------------------
	}
	{
		// ----- test 5 -----
		string t0[] = {"4225271513","8352579454","1582795371","3365182453","7374843700","3262631490","5261771017","5124728129","1537793032","1147236439"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 20;
		p2 = 0.5055321764007881;
		all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
