#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;
const int MOD = 1000000007;
int n, m;
bool disable[55], stunned[111], canZero[111];
int near[111];
int f[111][111];

int mul(int a, int b) {
	return (int)((ll)a * b % MOD);
}
void add(int &a, int b) {
	a += b;
	a %= MOD;
	if ( a < 0 ) a += MOD;
}

int powMod(int a, int n, int p) {
	int ret = n & 1 ? a : 1;
	for ( n >>= 1; n; n >>= 1 ) {
		a = (int)((ll)a * a % p);
		if ( n & 1 )
			ret = (int)((ll)ret * a % p);
	}
	return ret;
}

int solve(int p, vector<int> Qfrom, vector<int> Qto, vector<int> out) {
	memset(disable, 0, sizeof(disable));
	for ( int i = 0; i < m; i ++ )
		if ( out[i] == 0 ) 
			for ( int j = 0; j < m; j ++ )
				if ( out[j] == 0 && i != j && Qfrom[i] <= Qfrom[j] && Qto[j] < Qto[i] )
					disable[i] = true;
	memset(near, -1, sizeof(near));
	for ( int i = 0; i < m; i ++ )
		if ( out[i] == 0 && !disable[i] ) 
			near[Qto[i]] = max(near[Qto[i]], Qfrom[i]);

	while ( 1 ) {
		bool changed = false;
		for ( int i = 0; !changed && i < m; i ++ )
			if ( !disable[i] && out[i] > 0 ) 
				for ( int j = 0; !changed && j < m; j ++ )
					if ( !disable[j] && out[j] > 0 && i != j ) {
						if ( Qto[i] == Qto[j] ) {
							if ( Qfrom[i] == Qfrom[j] ) {
								if ( out[i] != out[j] ) return 0;
								changed = true;
								disable[i] = true;
								continue;
							} else {
								if ( Qfrom[i] > Qfrom[j] ) swap(i, j);
								Qto[i] = Qfrom[j] - 1;
								out[i] = out[i] * powMod(out[j], p - 2, p) % p;
								changed = true;
							}
						}
					}
		if ( !changed ) break;
	}
	memset(stunned, 0, sizeof(stunned));
	for ( int i = 0; i < n; i ++ )
		canZero[i] = true;
	for ( int i = 0; i < m; i ++ )
		if ( !disable[i] && out[i] > 0 ) {
			stunned[Qto[i]] = true;
			for ( int k = Qfrom[i]; k <= Qto[i]; k ++ )
				canZero[k] = false;
		}

	memset(f, 0, sizeof(f));
	f[0][0] = 1;
	for ( int i = 0; i < n; i ++ ) 
		for ( int j = 0; j <= n; j ++ ) 
			if ( f[i][j] ) {
				if ( stunned[i] ) {
					if ( near[i] != -1 && (j == 0 || i - near[i] < j) ) 
						continue;
					add(f[i+1][j==0?0:j+1], f[i][j]);
				} else {
					if ( canZero[i] )
						add(f[i+1][1], f[i][j]);
					if ( !(near[i] != -1 && (j == 0 || i - near[i] < j)) ) 
						add(f[i+1][j==0?0:j+1], mul(f[i][j], (p-1)));
				}
			}
	int ret = 0;
	for ( int j = 0; j <= n; j ++ )
		add(ret, f[n][j]);
	return ret;
}

class ProductQuery {
	public:
		int theInput(int N, vector <int> Qfrom, vector <int> Qto, vector <int> output) {
			n = N;
			m = Qfrom.size();
			vector<int> out2(m), out5(m);
			for ( int i = 0; i < m; i ++ ) {
				out2[i] = output[i] % 2;
				out5[i] = output[i] % 5;
			}
			int res2 = solve(2, Qfrom, Qto, out2);
			int	res5 = solve(5, Qfrom, Qto, out5);
			return mul(res2, res5);
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	ProductQuery *obj;
	int answer;
	obj = new ProductQuery();
	clock_t startTime = clock();
	answer = obj->theInput(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	{
		// ----- test 0 -----
		p0 = 63;
		int t1[] = {10, 5, 38, 8, 6, 16, 26, 15, 6, 52, 36, 9, 5, 47, 23, 34, 54, 16, 12, 45, 16, 17, 19, 10, 18, 18, 15, 25, 16, 1, 46, 19, 7, 6, 23, 36, 46, 3, 60, 50, 1, 2, 44, 19};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {15, 19, 49, 30, 57, 46, 30, 44, 18, 57, 38, 19, 20, 59, 59, 45, 60, 44, 15, 55, 42, 58, 60, 61, 34, 52, 41, 30, 29, 39, 50, 56, 19, 6, 45, 55, 56, 6, 60, 55, 53, 35, 60, 22};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {3, 0, 7, 0, 0, 9, 7, 1, 0, 5, 9, 0, 0, 5, 5, 1, 5, 7, 9, 5, 3, 5, 5, 5, 1, 3, 3, 1, 3, 0, 9, 5, 0, 9, 7, 5, 5, 1, 3, 5, 0, 0, 5, 7};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 97245661;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}
	return 0;
	{
		// ----- test 1 -----
		p0 = 5;
		int t1[] = {0,2,0};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {1,4,4};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {3,4,6};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 0;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 3;
		int t1[] = {0,1};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {1,2};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {5,8};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 4;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}
	{
		// ----- test 3 -----
		p0 = 8;
		int t1[] = {2,0,3,6};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {3,7,4,6};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {2,0,6,7};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 118080;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 5;
		int t1[] = {1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 2, 1, 2, 1, 2, 0, 1, 0, 0, 1, 0, 2, 0, 0, 2, 1, 0, 0, 2, 0, 0, 0, 2, 1, 1, 3, 3, 1};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {4, 1, 2, 4, 1, 4, 1, 3, 3, 3, 4, 2, 2, 2, 4, 4, 1, 2, 3, 1, 2, 4, 2, 3, 3, 4, 4, 2, 1, 4, 1, 1, 1, 3, 3, 3, 4, 3, 2};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {4, 1, 4, 8, 7, 4, 7, 8, 6, 8, 8, 2, 2, 2, 4, 4, 7, 2, 6, 7, 2, 8, 2, 6, 6, 4, 4, 4, 7, 4, 7, 7, 7, 8, 8, 8, 7, 9, 2};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 1;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}


	{
		// ----- test 5 -----
		p0 = 58;
		int t1[] = {5,5};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		int t2[] = {8,8};
		p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
		int t3[] = {1,2};
		p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
		p4 = 0;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
