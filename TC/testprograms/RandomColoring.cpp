#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

const double kEps = 1e-9;
double f[2][55][55][55], y[2][55][55][55], w[55][55][55];
int maxR, maxG, maxB;

double eval(double s[55][55][55], int x1, int x2, int y1, int y2, int z1, int z2) {
	x1=max(1, x1); x2= min(maxR, x2);
	y1=max(1, y1); y2= min(maxG, y2);
	z1=max(1, z1); z2= min(maxB, z2);
	if ( x1 > x2 || y1 > y2 || z1 > z2 ) return 0.0;
	return s[x2][y2][z2]-s[x1-1][y2][z2]-s[x2][y1-1][z2]-s[x2][y2][z1-1]
		+s[x1-1][y1-1][z2]+s[x1-1][y2][z1-1]+s[x2][y1-1][z1-1]-s[x1-1][y1-1][z1-1];
}

class RandomColoring {
	public:
		double getProbability(int N, int mmaxR, int mmaxG, int mmaxB, int startR, int startG, int startB, int d1, int d2) {
			d1--;
			memset(f, 0, sizeof(f));
			memset(y, 0, sizeof(y));
			memset(w, 0, sizeof(w));

			maxR=mmaxR, maxG=mmaxG, maxB=mmaxB;
			startR++, startG++, startB++;
			for ( int r = 1; r <= maxR; r ++ )
				for ( int g = 1; g <= maxG; g ++ )
					for ( int b = 1; b <= maxB; b ++ ) 
						w[r][g][b] = r*g*b;
			f[0][startR][startG][startB] = 1.0;
		   	y[0][startR][startG][startB] = 1.0 / (eval(w, startR-d2, startR+d2, startG-d2, startG+d2, startB-d2, startB+d2)
					- eval(w, startR-d1, startR+d1, startG-d1, startG+d1, startB-d1, startB+d1));
			for ( int r = startR; r <= maxR; r ++ )
				for ( int g = startG; g <= maxG; g ++ )
					for ( int b = startB; b <= maxB; b ++ )
						y[0][r][g][b] = y[0][startR][startG][startB];
			int cur = 0;
			for ( int i = 1; i < N; i ++ ) {
				cur ^= 1;
				memset(f[cur], 0, sizeof(f[cur]));
				memset(y[cur], 0, sizeof(y[cur]));
				for ( int r = 1; r <= maxR; r ++ )
					for ( int g = 1; g <= maxG; g ++ )
						for ( int b = 1; b <= maxB; b ++ ) {
							double cnt = (eval(w, r-d2, r+d2, g-d2, g+d2, b-d2, b+d2)
					- eval(w, r-d1, r+d1, g-d1, g+d1, b-d1, b+d1));
							f[cur][r][g][b] = (eval(y[!cur], r-d2, r+d2, g-d2, g+d2, b-d2, b+d2)
									- eval(y[!cur], r-d1, r+d1, g-d1, g+d1, b-d1, b+d1));
							y[cur][r][g][b] = y[cur][r-1][g][b]+y[cur][r][g-1][b]+y[cur][r][g][b-1]
								-y[cur][r-1][g-1][b]-y[cur][r-1][g][b-1]-y[cur][r][g-1][b-1]
								+y[cur][r-1][g-1][b-1]+(fabs(cnt) > kEps ? f[cur][r][g][b]/cnt : 0.0);
						}
			}
			double ans = 0;
			for ( int r = 1; r <= maxR; r ++ )
				for ( int g = 1; g <= maxG; g ++ )
					for ( int b = 1; b <= maxB; b ++ )
						if ( !(abs(r-startR)<=d2 && abs(g-startG)<=d2 && abs(b-startB)<=d2
									&& (abs(r-startR)>d1 || abs(g-startG)>d1 || abs(b-startB)>d1)) )
							ans += f[cur][r][g][b];
			return ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, bool hasAnswer, double p9) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8;
	cout << "]" << endl;
	RandomColoring *obj;
	double answer;
	obj = new RandomColoring();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p9 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p9 - answer) <= 1e-9 * max(1.0, fabs(p9));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	double p9;

	/*	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 2;
	p5 = 0;
	p6 = 0;
	p7 = 0;
	p8 = 1;
	p9 = 0.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 2;
	p5 = 0;
	p6 = 0;
	p7 = 0;
	p8 = 1;
	p9 = 0.22222222222222227;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
	// ------------------
	}
	 */
	{
		// ----- test 2 -----
		p0 = 7;
		p1 = 4;
		p2 = 2;
		p3 = 2;
		p4 = 0;
		p5 = 0;
		p6 = 0;
		p7 = 3;
		p8 = 3;
		p9 = 1.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}
	{
		// ----- test 3 -----
		p0 = 10;
		p1 = 7;
		p2 = 8;
		p3 = 9;
		p4 = 1;
		p5 = 2;
		p6 = 3;
		p7 = 0;
		p8 = 10;
		p9 = 0.0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 10;
		p1 = 7;
		p2 = 8;
		p3 = 9;
		p4 = 1;
		p5 = 2;
		p6 = 3;
		p7 = 4;
		p8 = 10;
		p9 = 0.37826245943967396;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 3;
		p1 = 3;
		p2 = 2;
		p3 = 2;
		p4 = 1;
		p5 = 0;
		p6 = 0;
		p7 = 1;
		p8 = 2;
		p9 = 0.09090909090909148;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
