#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

double f[2][55][55][55];
int ava[27], nAva;

inline int getbit(int s, int k) {
	return (s & (1 << k)) > 0;
}

class RandomColoring {
	public:
		double getProbability(int N, int maxR, int maxG, int maxB, int startR, int startG, int startB, int d1, int d2) {
			for ( int s = 0; s < 64; s ++ ) {
				if ( getbit(s, 0) && getbit(s, 1) ) continue;
				if ( getbit(s, 2) && getbit(s, 3) ) continue;
				if ( getbit(s, 4) && getbit(s, 5) ) continue;
				ava[nAva++] = s;
			}
			for ( int r = 0; r < maxR; r ++ )
				for ( int g = 0; g < maxG; g ++ )
					for ( int b = 0; b < maxB; b ++ ) {
						for ( int i = 0; i < nAva; i ++ ) {
							int rh = maxR - 1, rl = 0;
							int gh = maxG - 1, gl = 0;
							int bh = maxB - 1, bl = 0;

							rh = min(rh, r+d2); rl = max(rl, r-d2);
							gh = min(gh, g+d2); gl = max(gl, g-d2);
							bh = min(bh, b+d2); bl = max(bl, b-d2);

							int s = ava[i];
							if ( getbit(s, 0) ) rh = min(rh, r+d1);
							if ( getbit(s, 1) ) rl = max(rl, r-d1);
							if ( getbit(s, 2) ) gh = min(gh, g+d1);
							if ( getbit(s, 3) ) gl = max(gl, g-d1);
							if ( getbit(s, 4) ) bh = min(bh, b+d1);
							if ( getbit(s, 5) ) bl = max(bl, b-d1);

							hr[i][r][g][b] = rh, lr[i][r][g][b] = rl;
							hg[i][r][g][b] = gh, lg[i][r][g][b] = gl;
							hb[i][r][g][b] = bh, lb[i][r][g][b] = bl;
						}
					}
			f[0][startR][startG][startB] = 1.0 / g[startR][startG][startB];
			int cur = 0;
			for ( int i = 1; i < N; i ++ ) {
				cur ^= 1;
				memset(f[cur], 0, sizeof(cur));
				for ( int r = 0; r < maxR; r ++ )
					for ( int g = 0; g < maxG; g ++ )
						for ( int b = 0; b < maxB; b ++ ) {
							int cnt = 0;
							for ( int i = 0; i < nAva; i ++ ) {
								int rh = hr[i][r][g][b], rl = lr[i][r][g][b];
								int gh = hg[i][r][g][b], gl = lg[i][r][g][b];
								int bh = hb[i][r][g][b], bl = lb[i][r][g][b];

								cnt += eval1(i, rl, rh, gl, gh, bl, bh);
								f[cur][r][g][b] += eval2(!cur, rl, rh, gl, gh, bl, bh);
							}
							f[cur][r][g][b] /= cnt;
							w[cur][r][g][b] = 
						}
			}
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, bool hasAnswer, double p9) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3 << "," << p4 << "," << p5 << "," << p6 << "," << p7 << "," << p8;
	cout << "]" << endl;
	RandomColoring *obj;
	double answer;
	obj = new RandomColoring();
	clock_t startTime = clock();
	answer = obj->getProbability(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p9 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p9 - answer) <= 1e-9 * max(1.0, fabs(p9));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;
	int p5;
	int p6;
	int p7;
	int p8;
	double p9;

	{
		// ----- test 0 -----
		p0 = 2;
		p1 = 5;
		p2 = 1;
		p3 = 1;
		p4 = 2;
		p5 = 0;
		p6 = 0;
		p7 = 0;
		p8 = 1;
		p9 = 0.0;
		all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		p0 = 3;
		p1 = 5;
		p2 = 1;
		p3 = 1;
		p4 = 2;
		p5 = 0;
		p6 = 0;
		p7 = 0;
		p8 = 1;
		p9 = 0.22222222222222227;
		all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		p0 = 7;
		p1 = 4;
		p2 = 2;
		p3 = 2;
		p4 = 0;
		p5 = 0;
		p6 = 0;
		p7 = 3;
		p8 = 3;
		p9 = 1.0;
		all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		p0 = 10;
		p1 = 7;
		p2 = 8;
		p3 = 9;
		p4 = 1;
		p5 = 2;
		p6 = 3;
		p7 = 0;
		p8 = 10;
		p9 = 0.0;
		all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		p0 = 10;
		p1 = 7;
		p2 = 8;
		p3 = 9;
		p4 = 1;
		p5 = 2;
		p6 = 3;
		p7 = 4;
		p8 = 10;
		p9 = 0.37826245943967396;
		all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	{
		// ----- test 5 -----
		p0 = 3;
		p1 = 3;
		p2 = 2;
		p3 = 2;
		p4 = 1;
		p5 = 0;
		p6 = 0;
		p7 = 1;
		p8 = 2;
		p9 = 0.09090909090909148;
		all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, p5, p6, p7, p8, true, p9) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
