#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define MS(X) memset(X, 0, sizeof(X))

using namespace std;

const int kInf = 0x3f3f3f3f;
vector<int> vec[4];
int presum[55];
int f[55][55][55];

void upd(int &x, int y) {
	y = min(y, kInf);
	if ( y < x )
		x = y;
}

class SafeRemoval {
	public:
		int removeThem(vector <int> seq, int need) {
			MS(vec);
			MS(presum);
			MS(f);

			int n = seq.size();
			int initRem = 0;
			int tot = 0;
			for ( int i = 0; i < n; i ++ ) {
				vec[seq[i]%4].push_back(seq[i]);
				initRem = (initRem + seq[i]) % 4;
				tot += seq[i];
			}

			for ( int i = 0; i < 4; i ++ )
				sort(vec[i].begin(), vec[i].end());

			for ( int i = 0; i < vec[0].size(); i ++ )
				presum[i+1] = presum[i] + vec[0][i];

			for ( int i = 0; i <= vec[1].size(); i ++ )
				for ( int j = 0; j <= vec[2].size(); j ++ )
					for ( int k = 0; k <= vec[3].size(); k ++ )
						f[i][j][k] = kInf;
			f[0][0][0] = 0;
			for ( int i = 0; i <= vec[1].size(); i ++ )
				for ( int j = 0; j <= vec[2].size(); j ++ )
					for ( int k = 0; k <= vec[3].size(); k ++ ) 
						if ( f[i][j][k] != kInf ) {
							int curRem = (initRem - i*1 - j*2 - k*3) % 4;
							curRem = (curRem+4)%4;
							assert(curRem != 0);
							if ( i < vec[1].size() && curRem != 1 )
								upd(f[i+1][j][k], f[i][j][k]+vec[1][i]);
							if ( j < vec[2].size() && curRem != 2 )
								upd(f[i][j+1][k], f[i][j][k]+vec[2][j]);
							if ( k < vec[3].size() && curRem != 3 )
								upd(f[i][j][k+1], f[i][j][k]+vec[3][k]);
						}
			int ans = kInf;
			for ( int i = 0; i <= vec[1].size(); i ++ )
				for ( int j = 0; j <= vec[2].size(); j ++ )
					for ( int k = 0; k <= vec[3].size(); k ++ )
						if ( f[i][j][k] != kInf && need >= i+j+k && need-i-j-k <= vec[0].size() )
							upd(ans, f[i][j][k] + presum[need-i-j-k]);
			if ( ans == kInf ) return -1;
			return tot - ans;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	SafeRemoval *obj;
	int answer;
	obj = new SafeRemoval();
	clock_t startTime = clock();
	answer = obj->removeThem(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;
	int p2;
	{
		// ----- test 0 -----
		int t0[] = {3,8,4};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1;
		p2 = 11;
		all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
		// ------------------
	}


	{
		// ----- test 1 -----
		int t0[] = {1,1,1,1,1,1};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3;
		p2 = -1;
		all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = {1,6,1,10,1,2,7,11};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6;
		p2 = 21;
		all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {1,1,1,1,1,1,1,1,7};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 3;
		p2 = 6;
		all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
