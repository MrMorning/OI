#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
#include <cassert>

using namespace std;

typedef long long ll;

struct DisjointSet {
	int par[20];
	int find(int i) {
		return par[i] == i ? i : par[i] = find(par[i]);
	}
	void merge(int i, int j) {
		par[find(i)] = find(j);
	}
} dset;

class SetAndSet {
	public:
		int n;
		ll msk[20], g[1<<20];
		int f[1<<20], h[1<<20], log2[1<<20];

		void dfs(int cur, int i, int cnt) {
			f[cur] = cnt;
			if ( i == 20 )
				return;

			int bkup[20];
			memcpy(bkup, dset.par, sizeof(dset.par));
			dfs(cur, i + 1, cnt);
			cnt++;
			for ( int tmp = cur; tmp; tmp -= tmp & -tmp ) {
				int k = log2[tmp&-tmp];
				if ( msk[k] & msk[i] )
					if ( dset.find(k) != dset.find(i) )
						dset.merge(k, i), cnt--;
			}
			dfs(cur | 1<<i, i + 1, cnt);
			memcpy(dset.par, bkup, sizeof(bkup));
		}

		int countbit(ll x) {
			int res = 0;
			while ( x ) {
				res ++;
				x -= x & -x;
			}
			return res;
		}

		long long countandset(vector <int> A) {
			for ( int i = 0; i < 20; i ++ ) {
				log2[1<<i] = i;
				dset.par[i] = i;
			}
			h[0]=0;
			g[0]=0;
			for ( int s = 1, lim = 1<<20; s < lim; s ++ ) 
				h[s] = h[s-(s&-s)] + 1;
			memset(msk, 0, sizeof(msk));
			n = A.size();
			int tmp = (1<<20)-1;
			for ( int i = 0; i < n; i ++ )
				tmp &= A[i];
			for ( int i = 0; i < n; i ++ )
				A[i] ^= tmp;
			for ( int i = 0; i < n; i ++ ) 
				for ( int j = 0; j < 20; j ++ )
					if ( !(A[i] & (1<<j)) )
						msk[j] |= 1LL<<i;
			dfs(0, 0, 0);
			ll tot = 0;
			for ( int s = 1, lim = 1<<20; s < lim; s ++ ) {
				int t = s - (s & -s);
				g[s] = g[t] | msk[log2[s & -s]];
				int flag = (h[s] & 1) ? 1 : -1;
				tot += flag * (1LL<<(f[s]+countbit(~g[s] & ((1LL<<n)-1))));
			}
			return (1LL<<n) - tot;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	SetAndSet *obj;
	long long answer;
	obj = new SetAndSet();
	clock_t startTime = clock();
	answer = obj->countandset(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	long long p1;

	{
		// ----- test 5 -----
		int t0[] = {7, 15, 15, 12, 14, 15, 15, 5, 14};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 96ll;
		all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
		// ------------------
	}
	{
		// ----- test 0 -----
		int t0[] = {1,2};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 0ll;
		all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 1 -----
		int t0[] = {1,2,3,4};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 2ll;
		all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 2 -----
		int t0[] = {1,2,3,4,5};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 8ll;
		all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 3 -----
		int t0[] = {6,6,6};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 6ll;
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	{
		// ----- test 4 -----
		int t0[] = {13,10,4,15,4,8,4,2,4,14,0};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		p1 = 1728ll;
		all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
		// ------------------
	}


	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
