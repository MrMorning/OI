#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;
typedef long long ll;

const int MOD = 1000000007;
int bino[2011][2011];
int f[2011][2011], cop[2011][2011];

inline void add(int &res, int x) {
	res += x;
	res %= MOD;
	if ( res < 0 ) res += MOD;
}

int gcd(int a, int b) {
	return b ? gcd(b, a % b) : a;
}

class Spacetsk {
public:
	int eval(int n, int m, int k) {
		int res = 0;
		for ( int g = 1; g <= max(n, m); g ++ ) {
			int cnt = 0;
			add(cnt, cop[g * n / (1 + g) / g][g * m / (1 + g) / g]);
			res = (res + (ll)cnt * bino[g + 1][k] % MOD) % MOD;
		}
		return res;
	}
	int countsets(int L, int H, int K) {
		if ( K == 1 )
			return (L + 1) * (H + 1);
		int tot = 0;
		for ( int i = 0; i <= 2010; i ++ ) {
			bino[i][0] = 1;
			for ( int j = 1; j <= i; j ++ ) {
				add(bino[i][j], bino[i - 1][j]);
				add(bino[i][j], bino[i - 1][j - 1]);
			}
		}
		for ( int i = 1; i <= 2010; i ++ )
			for ( int j = 1; j <= 2010; j ++ ) {
				add(f[i][j], f[i - 1][j]);
				add(f[i][j], f[i][j - 1]);
				add(f[i][j], -f[i - 1][j - 1]);
				add(f[i][j], bino[gcd(i, j) + 1][K]);

				cop[i][j] = cop[i - 1][j] + cop[i][j - 1] - cop[i - 1][j - 1] + (gcd(i, j) == 1);
			}
		for ( int i = 0; i <= L; i ++ ) {
			if ( i != L ) {
				int n = L - i;
				add(tot, f[n][H]);
				add(tot, -eval(n, H, K));
			}
			add(tot, bino[H+1][K]);
			if ( i != 0 ) {
				int n = i;
				add(tot, f[n][H]);
				add(tot, -eval(n, H, K));
			}
		}
		return tot;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	Spacetsk *obj;
	int answer;
	obj = new Spacetsk();
	clock_t startTime = clock();
	answer = obj->countsets(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	
	{
	// ----- test 5 -----
	p0 = 561;
	p1 = 394;
	p2 = 20;
	p3 = 786097180;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
