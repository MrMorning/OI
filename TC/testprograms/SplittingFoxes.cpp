#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstring>
typedef long long ll;

using namespace std;

const int MOD = 1000000007;

struct Matrix {
	int ele[4][4];
} idMat;

Matrix operator* (const Matrix &A, const Matrix &B) {
	Matrix C;
	memset(C.ele, 0, sizeof(C.ele));
	for ( int i = 0; i < 4; i ++ )
		for ( int j = 0; j < 4; j ++ )
			for ( int k = 0; k < 4; k ++ )
			   C.ele[i][j] = (C.ele[i][j] + (ll)A.ele[i][k] * B.ele[k][j] % MOD) % MOD;
	return C;
}

Matrix powMat(Matrix A, ll n) {
	Matrix res = n & 1 ? A : idMat;
	for ( n >>= 1; n; n >>= 1 ) {
		A = A * A;
		if ( n & 1 )
			res = res * A;
	}
	return res;
}

inline int add(int a, int b) {
	a %= MOD, b %= MOD;
	int res = (a + b) % MOD;
	if ( res < 0 ) res += MOD;
	return res;
}

class SplittingFoxes {
public:
	int sum(long long n, int S, int L, int R) {
		memset(idMat.ele, 0, sizeof(idMat.ele));
		for ( int i = 0; i < 4; i ++ )
			idMat.ele[i][i] = 1;
		Matrix F;
		memset(F.ele, 0, sizeof(F.ele));
		F.ele[0][0] = 0;
		F.ele[1][0] = 0;
		F.ele[2][0] = S;
		F.ele[3][0] = add(add(S, L), R);
		Matrix T;
		memset(T.ele, 0, sizeof(T.ele));
		T.ele[0][0] = add(S, add(-L, -R)), T.ele[0][1] = S;
		T.ele[1][1] = S, T.ele[1][2] = add(L, -R);
		T.ele[2][1] = add(R, -L), T.ele[2][2] = S, T.ele[2][3] = S;
		T.ele[3][3] = add(add(S, L), R);

		Matrix V = powMat(T, n-1);
		F = V * F;

		return F.ele[0][0];
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	SplittingFoxes *obj;
	int answer;
	obj = new SplittingFoxes();
	clock_t startTime = clock();
	answer = obj->sum(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	int p1;
	int p2;
	int p3;
	int p4;
	
	{
	// ----- test 0 -----
	p0 = 58ll;
	p1 = 2;
	p2 = 0;
	p3 = 0;
	p4 = 0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3ll;
	p1 = 1;
	p2 = 1;
	p3 = 0;
	p4 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 5ll;
	p1 = 1;
	p2 = 3;
	p3 = 2;
	p4 = 34;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 5ll;
	p1 = 1;
	p2 = 2;
	p3 = 3;
	p4 = 999999973;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 123456789ll;
	p1 = 987654321;
	p2 = 544;
	p3 = 544;
	p4 = 0;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	
	{
	// ----- test 5 -----
	p0 = 65536ll;
	p1 = 1024;
	p2 = 512;
	p3 = 4096;
	p4 = 371473914;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
