#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <cstring>
#define FOREACH(I, C) for(__typeof((C).begin()) I = (C).begin(); I != (C).end(); I++)

using namespace std;
typedef long long ll;

bool dpDone[1<<16][55];
double dpMemo[1<<16][55];
#define log2 loggg2
int log2[1<<16];
int cur;
int nWord, len;
vector<string> word;

struct Data {
	int msk;
	char minChar;
} data[1<<16][55];

int countBit(int s) {
	int res = 0;
	while ( s ) {
		res += s & 1;
		s >>= 1;
	}
	return res;
}

double dp(int s, int n) {
	if ( dpDone[s][n] )
		return dpMemo[s][n];
	dpDone[s][n] = true;
	double &res = dpMemo[s][n] = 0;
	if ( countBit(s) == 1 ) 
		return res = 1.0;
	if ( n == len )
		return res = 0;
	int allSame = 0;
	for ( int i = 0; i < len; i ++ ) {
		if ( data[s][i].msk == s )
			allSame++;
	}

	int left = allSame - n;

	double ans = 0;
	for ( int i = 0; i < len; i ++ ) {
		if ( data[s][i].minChar == word[cur][i] ) {
			if ( data[s][i].msk == s ) {
				if ( left ) {
					ans += dp(s, n + 1);
					left --;
				}
			} else 
				ans += dp(data[s][i].msk, n + 1);
		}
	}
	ans /= len - n;
	return dpMemo[s][n] = ans;
}

class StrangeDictionary2 {
	public:
		vector <double> getProbabilities(vector <string> words) {
			for ( int i = 0; i < 16; i ++ )
				log2[1<<i] = i;
			nWord = words.size();
			word = words;
			len = words[0].size();

			for ( int s = 1, lim = (1 << nWord); s < lim; s ++ ) {
				for ( int k = 0; k < len; k ++ ) {
					data[s][k].minChar = 'z'+1;
					data[s][k].msk = 0;

					for ( int tmp = s; tmp ; tmp -= tmp & -tmp ) {
						int u = tmp & -tmp;
						int t = log2[u];
						if ( word[t][k] < data[s][k].minChar ) {
							data[s][k].minChar = word[t][k];
							data[s][k].msk = 1 << t;
						} else if ( word[t][k] == data[s][k].minChar )
							data[s][k].msk |= 1 << t;
					}
				}
			}

			vector<double> res(nWord);
			for ( int i = 0; i < nWord; i ++ ) {
				cur = i;
				memset(dpDone, 0, sizeof(dpDone));
				res[i] = dp((1 << nWord) - 1, 0);
			}
			return res;
		}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, vector <double> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	StrangeDictionary2 *obj;
	vector <double> answer;
	obj = new StrangeDictionary2();
	clock_t startTime = clock();
	answer = obj->getProbabilities(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (fabs(p1[i] - answer[i]) > 1e-9 * max(1.0, fabs(p1[i]))) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <string> p0;
	vector <double> p1;
	/*
	   {
	// ----- test 0 -----
	string t0[] = {"hardesttestever"};
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {1.0};
	p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	string t0[] = {"ab","ba"};
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {0.5,0.5};
	p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	string t0[] = {"aza","aab","bba"};
	p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	double t1[] = {0.3333333333333333,0.5,0.16666666666666666};
	p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	 */
	{
		// ----- test 3 -----
		string t0[] = {"bbkgaedkbcfacicbivqsvlaszbtccadadbddalgucdcdrbbdcd", "bbctaedkbcfacicbabegylsdabicckdfdbddalgbcdclbbbkfd", "bbcgaedkkcfecicfabecvladaqlccadzrbdhalgbcdpdbbbdyd", "bbcgaedkpcfacicbabjcvoadubiczadadhqdalgbcdddbqbded", "wbcgaedkbcfacicbqbecvladatinyawadbddalsbxdcdbbbdcz", "bhclaeewbcfacidiabfcisadabimcafadbfdalgbcdvsbbbdcf", "bbzlaedkbclanjcbxbechoadabiccawadbddalgbxzfdbbbicd", "bbcgaedkbeyacicbibxcvsadmticcadadbddqlgbidcdbxrdco", "bbcgaedkbczakiobsbecxlnjabiccadaxbdualgbcdtdsdfzxd", "bbcgaedkbefacicbqgecvsaoabkccasadzddapgbqdcqbbbdcd", "wbcgaedkbcfkticfaeecwladabicckdldbddwwgznjcdbbbdcd", "cbcwzgxkjcfacicuabecvzhdxjiccadakbddalgycdcdbbbdcd", "bbcgaedxbmfacusfabecwladabiccpdadbddalibcdcdbbwdcd", "blcgsedkbcfacidbxbecyoadabiccadajbddaxmbcdcdwbbdly", "bhcgvelkjcffcicfibfgnladabiccadadeddelgbkscdbbbvcd", "bbcgakyqjcfacicbatecyladabiccadvdbidalgbcocdtbddyl"};
		p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
		double t1[] = {0.0767118223138034, 0.11617222201927419, 0.06987411830876322, 0.07638451766525763, 0.08973003906073423, 0.04383480975984319, 0.10819148254400832, 0.03796305954997451, 0.01905962146896534, 0.0512174454587139, 0.03962744076345573, 0.034971183110860254, 0.11819585889110965, 0.04219503228319486, 0.03875582312335827, 0.037115523678682455};
		p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
		all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
		// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
