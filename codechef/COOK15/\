#include <cstdio>
#include <algorithm>
using namespace std;
const int N = 200000;
int D, T;
int diagMask[N];
bool marked[N + 1];
int lose[N + 1];

struct Query{
	int x, y, i, flag;
	Query(){}
	Query(int _x, int _y, int _i, int _flag):
		x(_x), y(_y), i(_i), flag(_flag){}
	bool operator< (const Query &t) const{
		return x < t.x;
	}
} Q[400000];
int nQ;

int bit[200010];

int main(){
	freopen("t.in", "r", stdin);
	scanf("%d", &D);
	for(int x = 1, y0 = 1, dg = 0; x <= N; x ++)
		if(!marked[x]){
			for(; y0 <= N && marked[y0]; y0 ++);
			if(y0 > N)
				break;
			for(; dg < N && diagMask[dg] == (1 << D) - 1; dg ++);
			int y;
			for(y = max(y0, x + dg); y <= N && (marked[y] || (diagMask[y - x] & 1 << (x % D))); y ++);
			if(y <= N){
				lose[x] = y;
				lose[y] = x;
				diagMask[y - x] |= 1 << (x % D);
				marked[y] = true;
			}
			marked[x] = true;
		}
	scanf("%d", &T);
	for(int i = 1; i <= T; i ++){
		int x1, y1, x2, y2;
		scanf("%d%d%d%d", &x1, &y1, &x2, &y2);
		Q[nQ ++] = Query(x2, y2, 1, i);
		Q[nQ ++] = Query(x1 - 1, y2, -1, i);
		Q[nQ ++] = Query(x2, y1 - 1, -1, i);
		Q[nQ ++] = Query(x1 - 1, y1 - 1, 1, i);
	}
	sort(Q, Q + nQ);
	for(int x = 1, i = 0; x <= N; x ++){
		if(lose[x])
			add(lose[x], 1);
		while(i < 4 * T && Q[i].x == x)
			Q[i].set(sum(Q[i].y)), i ++;
		if(i == 4 * T)
			break;
	}
	for(int i = 1; i <= T; i ++)
		printf("%d\n", ans[i]);
}
