asm(
"	.file	\"LUCKYDAY_cp.cpp\"\n"
"	.section	.text._ZSt19__move_median_firstIP5QueryEvT_S2_S2_,\"axG\",@progbits,_ZSt19__move_median_firstIP5QueryEvT_S2_S2_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt19__move_median_firstIP5QueryEvT_S2_S2_\n"
"	.type	_ZSt19__move_median_firstIP5QueryEvT_S2_S2_, @function\n"
"_ZSt19__move_median_firstIP5QueryEvT_S2_S2_:\n"
".LFB441:\n"
"	.cfi_startproc\n"
"	subl	$36, %esp\n"
"	.cfi_def_cfa_offset 40\n"
"	movl	44(%esp), %edx\n"
"	movl	40(%esp), %eax\n"
"	movl	%esi, 24(%esp)\n"
"	movl	48(%esp), %ecx\n"
"	movl	%ebx, 20(%esp)\n"
"	movl	8(%edx), %esi\n"
"	.cfi_offset 3, -20\n"
"	.cfi_offset 6, -16\n"
"	movl	12(%eax), %ebx\n"
"	movl	%edi, 28(%esp)\n"
"	movl	8(%eax), %edi\n"
"	.cfi_offset 7, -12\n"
"	movl	%ebp, 32(%esp)\n"
"	movl	%esi, 4(%esp)\n"
"	movl	12(%edx), %esi\n"
"	cmpl	%esi, %ebx\n"
"	jg	.L2\n"
"	.cfi_offset 5, -8\n"
"	jge	.L17\n"
".L11:\n"
"	movl	8(%ecx), %ebp\n"
"	movl	%ebp, 12(%esp)\n"
"	movl	12(%ecx), %ebp\n"
"	cmpl	%ebp, %esi\n"
"	movl	%ebp, 8(%esp)\n"
"	jle	.L18\n"
".L4:\n"
"	cmpl	8(%esp), %ebx\n"
"	jg	.L1\n"
"	jl	.L15\n"
"	cmpl	12(%esp), %edi\n"
"	.p2align 4,,3\n"
"	jb	.L15\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L1:\n"
"	movl	20(%esp), %ebx\n"
"	movl	24(%esp), %esi\n"
"	movl	28(%esp), %edi\n"
"	movl	32(%esp), %ebp\n"
"	addl	$36, %esp\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	.cfi_restore 7\n"
"	.cfi_restore 6\n"
"	.cfi_restore 3\n"
"	ret\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L17:\n"
"	.cfi_restore_state\n"
"	cmpl	4(%esp), %edi\n"
"	jb	.L11\n"
".L2:\n"
"	movl	8(%ecx), %ebp\n"
"	movl	%ebp, 12(%esp)\n"
"	movl	12(%ecx), %ebp\n"
"	cmpl	%ebp, %ebx\n"
"	movl	%ebp, 8(%esp)\n"
"	jl	.L1\n"
"	jle	.L19\n"
".L14:\n"
"	cmpl	8(%esp), %esi\n"
"	jg	.L9\n"
"	.p2align 4,,7\n"
"	jl	.L15\n"
"	movl	12(%esp), %esi\n"
"	cmpl	%esi, 4(%esp)\n"
"	jb	.L15\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L9:\n"
"	movl	(%edx), %ebp\n"
"	movl	(%eax), %esi\n"
"	movl	4(%eax), %ecx\n"
"	movl	%ebp, (%eax)\n"
"	movl	4(%edx), %ebp\n"
"	movl	%ebp, 4(%eax)\n"
"	movl	8(%edx), %ebp\n"
"	movl	%ebp, 8(%eax)\n"
"	movl	12(%edx), %ebp\n"
"	movl	%ebp, 12(%eax)\n"
"	movl	%esi, (%edx)\n"
"	movl	%ecx, 4(%edx)\n"
"	movl	%edi, 8(%edx)\n"
"	movl	%ebx, 12(%edx)\n"
"	jmp	.L1\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L18:\n"
"	jl	.L9\n"
"	movl	12(%esp), %esi\n"
"	cmpl	%esi, 4(%esp)\n"
"	jae	.L4\n"
"	.p2align 4,,3\n"
"	jmp	.L9\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L19:\n"
"	cmpl	12(%esp), %edi\n"
"	jb	.L1\n"
"	.p2align 4,,7\n"
"	jmp	.L14\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L15:\n"
"	movl	(%ecx), %ebp\n"
"	movl	(%eax), %esi\n"
"	movl	4(%eax), %edx\n"
"	movl	%ebp, (%eax)\n"
"	movl	4(%ecx), %ebp\n"
"	movl	%ebp, 4(%eax)\n"
"	movl	8(%ecx), %ebp\n"
"	movl	%ebp, 8(%eax)\n"
"	movl	12(%ecx), %ebp\n"
"	movl	%ebp, 12(%eax)\n"
"	movl	%esi, (%ecx)\n"
"	movl	%edx, 4(%ecx)\n"
"	movl	%edi, 8(%ecx)\n"
"	movl	%ebx, 12(%ecx)\n"
"	jmp	.L1\n"
"	.cfi_endproc\n"
".LFE441:\n"
"	.size	_ZSt19__move_median_firstIP5QueryEvT_S2_S2_, .-_ZSt19__move_median_firstIP5QueryEvT_S2_S2_\n"
"	.section	.text._ZSt25__unguarded_linear_insertIP5QueryEvT_,\"axG\",@progbits,_ZSt25__unguarded_linear_insertIP5QueryEvT_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt25__unguarded_linear_insertIP5QueryEvT_\n"
"	.type	_ZSt25__unguarded_linear_insertIP5QueryEvT_, @function\n"
"_ZSt25__unguarded_linear_insertIP5QueryEvT_:\n"
".LFB444:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	movl	20(%esp), %edx\n"
"	movl	12(%edx), %ebx\n"
"	cmpl	-4(%edx), %ebx\n"
"	movl	(%edx), %ebp\n"
"	movl	4(%edx), %edi\n"
"	movl	8(%edx), %esi\n"
"	jg	.L21\n"
"	jge	.L29\n"
".L26:\n"
"	leal	-16(%edx), %eax\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L23:\n"
"	movl	(%eax), %ecx\n"
"	movl	%ecx, (%edx)\n"
"	movl	4(%eax), %ecx\n"
"	movl	%ecx, 4(%edx)\n"
"	movl	8(%eax), %ecx\n"
"	movl	%ecx, 8(%edx)\n"
"	movl	12(%eax), %ecx\n"
"	movl	%ecx, 12(%edx)\n"
"	leal	-16(%eax), %ecx\n"
"	cmpl	%ebx, 12(%ecx)\n"
"	jg	.L25\n"
"	jge	.L30\n"
".L27:\n"
"	movl	%eax, %edx\n"
".L21:\n"
"	movl	%ebp, (%edx)\n"
"	movl	%edi, 4(%edx)\n"
"	movl	%esi, 8(%edx)\n"
"	movl	%ebx, 12(%edx)\n"
"	popl	%ebx\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L30:\n"
"	.cfi_restore_state\n"
"	cmpl	%esi, 8(%ecx)\n"
"	jbe	.L27\n"
".L25:\n"
"	movl	%eax, %edx\n"
"	movl	%ecx, %eax\n"
"	jmp	.L23\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L29:\n"
"	cmpl	-8(%edx), %esi\n"
"	jb	.L26\n"
"	movl	%ebp, (%edx)\n"
"	movl	%edi, 4(%edx)\n"
"	movl	%esi, 8(%edx)\n"
"	movl	%ebx, 12(%edx)\n"
"	popl	%ebx\n"
"	.cfi_restore 3\n"
"	.cfi_def_cfa_offset 16\n"
"	popl	%esi\n"
"	.cfi_restore 6\n"
"	.cfi_def_cfa_offset 12\n"
"	popl	%edi\n"
"	.cfi_restore 7\n"
"	.cfi_def_cfa_offset 8\n"
"	popl	%ebp\n"
"	.cfi_restore 5\n"
"	.cfi_def_cfa_offset 4\n"
"	ret\n"
"	.cfi_endproc\n"
".LFE444:\n"
"	.size	_ZSt25__unguarded_linear_insertIP5QueryEvT_, .-_ZSt25__unguarded_linear_insertIP5QueryEvT_\n"
"	.section	.text._ZSt16__insertion_sortIP5QueryEvT_S2_,\"axG\",@progbits,_ZSt16__insertion_sortIP5QueryEvT_S2_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	.type	_ZSt16__insertion_sortIP5QueryEvT_S2_, @function\n"
"_ZSt16__insertion_sortIP5QueryEvT_S2_:\n"
".LFB437:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	subl	$60, %esp\n"
"	.cfi_def_cfa_offset 80\n"
"	movl	80(%esp), %esi\n"
"	cmpl	84(%esp), %esi\n"
"	je	.L31\n"
"	leal	16(%esi), %ebx\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L31\n"
"	leal	32(%esi), %edi\n"
"	jmp	.L37\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L33:\n"
"	movl	%ebx, (%esp)\n"
"	addl	$16, %ebx\n"
"	call	_ZSt25__unguarded_linear_insertIP5QueryEvT_\n"
"	movl	%edi, %ecx\n"
"	addl	$16, %edi\n"
"	cmpl	84(%esp), %ecx\n"
"	je	.L31\n"
".L37:\n"
"	movl	12(%ebx), %ebp\n"
"	cmpl	12(%esi), %ebp\n"
"	movl	8(%ebx), %edx\n"
"	jg	.L33\n"
"	jl	.L38\n"
"	cmpl	8(%esi), %edx\n"
"	jae	.L33\n"
".L38:\n"
"	movl	(%ebx), %eax\n"
"	movl	%edi, %ecx\n"
"	movl	%eax, 40(%esp)\n"
"	movl	4(%ebx), %eax\n"
"	movl	%eax, 44(%esp)\n"
"	movl	%ebx, %eax\n"
"	subl	%esi, %eax\n"
"	sarl	$4, %eax\n"
"	testl	%eax, %eax\n"
"	jne	.L40\n"
".L35:\n"
"	movl	40(%esp), %eax\n"
"	addl	$16, %edi\n"
"	addl	$16, %ebx\n"
"	cmpl	84(%esp), %ecx\n"
"	movl	%edx, 8(%esi)\n"
"	movl	%ebp, 12(%esi)\n"
"	movl	%eax, (%esi)\n"
"	movl	44(%esp), %eax\n"
"	movl	%eax, 4(%esi)\n"
"	jne	.L37\n"
".L31:\n"
"	addl	$60, %esp\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 20\n"
"	popl	%ebx\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L40:\n"
"	.cfi_restore_state\n"
"	sall	$4, %eax\n"
"	movl	%eax, 28(%esp)\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%edi, %eax\n"
"	subl	28(%esp), %eax\n"
"	movl	%edx, 32(%esp)\n"
"	movl	%esi, 4(%esp)\n"
"	movl	%eax, (%esp)\n"
"	movl	%edi, 36(%esp)\n"
"	call	memmove\n"
"	movl	36(%esp), %ecx\n"
"	movl	32(%esp), %edx\n"
"	jmp	.L35\n"
"	.cfi_endproc\n"
".LFE437:\n"
"	.size	_ZSt16__insertion_sortIP5QueryEvT_S2_, .-_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	.section	.text._ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_,\"axG\",@progbits,_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	.type	_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_, @function\n"
"_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_:\n"
".LFB455:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	movl	24(%esp), %ebp\n"
"	cmpl	28(%esp), %ebp\n"
"	movl	20(%esp), %ebx\n"
"	movl	40(%esp), %edi\n"
"	movl	44(%esp), %esi\n"
"	jle	.L50\n"
"	leal	-1(%ebp), %eax\n"
"	movl	%eax, %ecx\n"
"	shrl	$31, %ecx\n"
"	addl	%eax, %ecx\n"
"	sarl	%ecx\n"
"	movl	%ecx, %eax\n"
"	sall	$4, %eax\n"
"	addl	%ebx, %eax\n"
"	cmpl	12(%eax), %esi\n"
"	jle	.L56\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L51:\n"
"	movl	%ecx, %edx\n"
"	movl	%ebp, %eax\n"
"	sall	$4, %edx\n"
"	addl	%ebx, %edx\n"
"	movl	(%edx), %ebp\n"
"	sall	$4, %eax\n"
"	addl	%ebx, %eax\n"
"	cmpl	%ecx, 28(%esp)\n"
"	movl	%ebp, (%eax)\n"
"	movl	4(%edx), %ebp\n"
"	movl	%ebp, 4(%eax)\n"
"	movl	8(%edx), %ebp\n"
"	movl	%ebp, 8(%eax)\n"
"	movl	12(%edx), %ebp\n"
"	movl	%ebp, 12(%eax)\n"
"	jl	.L48\n"
".L43:\n"
"	movl	32(%esp), %eax\n"
"	movl	%edi, 8(%edx)\n"
"	movl	%esi, 12(%edx)\n"
"	movl	%eax, (%edx)\n"
"	movl	36(%esp), %eax\n"
"	movl	%eax, 4(%edx)\n"
"	popl	%ebx\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L48:\n"
"	.cfi_restore_state\n"
"	leal	-1(%ecx), %eax\n"
"	movl	%eax, %ebp\n"
"	shrl	$31, %ebp\n"
"	addl	%ebp, %eax\n"
"	sarl	%eax\n"
"	movl	%eax, %ebp\n"
"	sall	$4, %ebp\n"
"	addl	%ebx, %ebp\n"
"	cmpl	%esi, 12(%ebp)\n"
"	jl	.L49\n"
"	jg	.L43\n"
"	cmpl	%edi, 8(%ebp)\n"
"	jae	.L43\n"
".L49:\n"
"	movl	%ecx, %ebp\n"
"	movl	%eax, %ecx\n"
"	.p2align 4,,4\n"
"	jmp	.L51\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L56:\n"
"	jl	.L50\n"
"	cmpl	8(%eax), %edi\n"
"	.p2align 4,,4\n"
"	ja	.L51\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L50:\n"
"	movl	%ebp, %edx\n"
"	sall	$4, %edx\n"
"	addl	%ebx, %edx\n"
"	jmp	.L43\n"
"	.cfi_endproc\n"
".LFE455:\n"
"	.size	_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_, .-_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	.section	.text._ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_,\"axG\",@progbits,_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	.type	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_, @function\n"
"_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_:\n"
".LFB450:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	subl	$28, %esp\n"
"	.cfi_def_cfa_offset 48\n"
"	movl	52(%esp), %eax\n"
"	movl	56(%esp), %ebp\n"
"	movl	48(%esp), %ecx\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%ebp, %eax\n"
"	subl	$1, %eax\n"
"	movl	%eax, %edx\n"
"	shrl	$31, %edx\n"
"	addl	%eax, %edx\n"
"	movl	%edx, 4(%esp)\n"
"	movl	8(%esp), %edx\n"
"	sarl	4(%esp)\n"
"	movl	4(%esp), %eax\n"
"	movl	%ebp, 12(%esp)\n"
"	cmpl	%eax, %edx\n"
"	jge	.L58\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L64:\n"
"	leal	1(%edx), %eax\n"
"	movl	%edx, %ebx\n"
"	leal	(%eax,%eax), %edx\n"
"	sall	$5, %eax\n"
"	addl	%ecx, %eax\n"
"	movl	8(%eax), %ebp\n"
"	leal	-1(%edx), %esi\n"
"	movl	%esi, %edi\n"
"	sall	$4, %edi\n"
"	addl	%ecx, %edi\n"
"	movl	%ebp, (%esp)\n"
"	movl	12(%edi), %ebp\n"
"	cmpl	%ebp, 12(%eax)\n"
"	jg	.L59\n"
"	jl	.L65\n"
"	movl	(%esp), %ebp\n"
"	cmpl	8(%edi), %ebp\n"
"	jae	.L59\n"
".L65:\n"
"	movl	%esi, %eax\n"
"	movl	%esi, %edx\n"
"	sall	$4, %eax\n"
"	addl	%ecx, %eax\n"
".L59:\n"
"	movl	(%eax), %esi\n"
"	sall	$4, %ebx\n"
"	addl	%ecx, %ebx\n"
"	cmpl	4(%esp), %edx\n"
"	movl	%esi, (%ebx)\n"
"	movl	4(%eax), %esi\n"
"	movl	%esi, 4(%ebx)\n"
"	movl	8(%eax), %esi\n"
"	movl	%esi, 8(%ebx)\n"
"	movl	12(%eax), %eax\n"
"	movl	%eax, 12(%ebx)\n"
"	jl	.L64\n"
".L58:\n"
"	testb	$1, 12(%esp)\n"
"	jne	.L62\n"
"	movl	12(%esp), %eax\n"
"	subl	$2, %eax\n"
"	movl	%eax, %ebx\n"
"	shrl	$31, %ebx\n"
"	addl	%ebx, %eax\n"
"	sarl	%eax\n"
"	cmpl	%eax, %edx\n"
"	je	.L66\n"
".L62:\n"
"	movl	8(%esp), %eax\n"
"	movl	%edx, 52(%esp)\n"
"	movl	%ecx, 48(%esp)\n"
"	movl	%eax, 56(%esp)\n"
"	addl	$28, %esp\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 20\n"
"	popl	%ebx\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	jmp	_ZSt11__push_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L66:\n"
"	.cfi_restore_state\n"
"	movl	%edx, %eax\n"
"	leal	1(%edx,%edx), %edx\n"
"	movl	%edx, %ebx\n"
"	sall	$4, %ebx\n"
"	addl	%ecx, %ebx\n"
"	movl	(%ebx), %esi\n"
"	sall	$4, %eax\n"
"	addl	%ecx, %eax\n"
"	movl	%esi, (%eax)\n"
"	movl	4(%ebx), %esi\n"
"	movl	%esi, 4(%eax)\n"
"	movl	8(%ebx), %esi\n"
"	movl	%esi, 8(%eax)\n"
"	movl	12(%ebx), %ebx\n"
"	movl	%ebx, 12(%eax)\n"
"	jmp	.L62\n"
"	.cfi_endproc\n"
".LFE450:\n"
"	.size	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_, .-_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	.section	.text._ZSt13__heap_selectIP5QueryEvT_S2_S2_,\"axG\",@progbits,_ZSt13__heap_selectIP5QueryEvT_S2_S2_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt13__heap_selectIP5QueryEvT_S2_S2_\n"
"	.type	_ZSt13__heap_selectIP5QueryEvT_S2_S2_, @function\n"
"_ZSt13__heap_selectIP5QueryEvT_S2_S2_:\n"
".LFB439:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	subl	$76, %esp\n"
"	.cfi_def_cfa_offset 96\n"
"	movl	96(%esp), %ebx\n"
"	movl	100(%esp), %eax\n"
"	subl	%ebx, %eax\n"
"	cmpl	$31, %eax\n"
"	movl	%eax, 44(%esp)\n"
"	jle	.L71\n"
"	movl	44(%esp), %eax\n"
"	sarl	$4, %eax\n"
"	movl	%eax, %edi\n"
"	subl	$2, %edi\n"
"	sarl	%edi\n"
"	movl	%edi, %esi\n"
"	sall	$4, %esi\n"
"	movl	%eax, 40(%esp)\n"
"	addl	%ebx, %esi\n"
"	jmp	.L72\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L81:\n"
"	subl	$1, %edi\n"
".L72:\n"
"	movl	8(%esi), %edx\n"
"	movl	(%esi), %ebp\n"
"	movl	4(%esi), %ecx\n"
"	movl	12(%esi), %eax\n"
"	subl	$16, %esi\n"
"	movl	%edx, 56(%esp)\n"
"	movl	%edx, 20(%esp)\n"
"	movl	40(%esp), %edx\n"
"	movl	%ebp, 48(%esp)\n"
"	movl	%ecx, 52(%esp)\n"
"	movl	%eax, 60(%esp)\n"
"	movl	%ebp, 12(%esp)\n"
"	movl	%ecx, 16(%esp)\n"
"	movl	%eax, 24(%esp)\n"
"	movl	%edx, 8(%esp)\n"
"	movl	%edi, 4(%esp)\n"
"	movl	%ebx, (%esp)\n"
"	call	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	testl	%edi, %edi\n"
"	jne	.L81\n"
".L71:\n"
"	movl	44(%esp), %edx\n"
"	movl	100(%esp), %esi\n"
"	movl	104(%esp), %edi\n"
"	sarl	$4, %edx\n"
"	cmpl	104(%esp), %esi\n"
"	movl	%edx, 44(%esp)\n"
"	jae	.L67\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L77:\n"
"	movl	12(%ebx), %edx\n"
"	cmpl	%edx, 12(%esi)\n"
"	movl	8(%esi), %eax\n"
"	jg	.L73\n"
"	jl	.L76\n"
"	cmpl	8(%ebx), %eax\n"
"	jae	.L73\n"
".L76:\n"
"	movl	12(%esi), %eax\n"
"	movl	8(%esi), %edx\n"
"	movl	(%esi), %ebp\n"
"	movl	4(%esi), %ecx\n"
"	movl	%eax, 60(%esp)\n"
"	movl	%eax, 24(%esp)\n"
"	movl	(%ebx), %eax\n"
"	movl	%edx, 56(%esp)\n"
"	movl	%ebp, 48(%esp)\n"
"	movl	%ecx, 52(%esp)\n"
"	movl	%eax, (%esi)\n"
"	movl	4(%ebx), %eax\n"
"	movl	%eax, 4(%esi)\n"
"	movl	8(%ebx), %eax\n"
"	movl	%eax, 8(%esi)\n"
"	movl	12(%ebx), %eax\n"
"	movl	%eax, 12(%esi)\n"
"	movl	%edx, 20(%esp)\n"
"	movl	44(%esp), %edx\n"
"	movl	%ebp, 12(%esp)\n"
"	movl	%ecx, 16(%esp)\n"
"	movl	$0, 4(%esp)\n"
"	movl	%edx, 8(%esp)\n"
"	movl	%ebx, (%esp)\n"
"	call	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
".L73:\n"
"	addl	$16, %esi\n"
"	cmpl	%esi, %edi\n"
"	ja	.L77\n"
".L67:\n"
"	addl	$76, %esp\n"
"	.cfi_def_cfa_offset 20\n"
"	popl	%ebx\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
"	.cfi_endproc\n"
".LFE439:\n"
"	.size	_ZSt13__heap_selectIP5QueryEvT_S2_S2_, .-_ZSt13__heap_selectIP5QueryEvT_S2_S2_\n"
"	.section	.text._ZSt16__introsort_loopIP5QueryiEvT_S2_T0_,\"axG\",@progbits,_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_,comdat\n"
"	.p2align 4,,15\n"
"	.weak	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_\n"
"	.type	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_, @function\n"
"_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_:\n"
".LFB433:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	subl	$76, %esp\n"
"	.cfi_def_cfa_offset 96\n"
"	movl	96(%esp), %ebp\n"
"	movl	100(%esp), %eax\n"
"	subl	%ebp, %eax\n"
"	cmpl	$271, %eax\n"
"	jle	.L82\n"
"	movl	104(%esp), %edx\n"
"	testl	%edx, %edx\n"
"	je	.L98\n"
"	leal	16(%ebp), %edx\n"
"	movl	%edx, 44(%esp)\n"
".L85:\n"
"	movl	100(%esp), %edx\n"
"	sarl	$5, %eax\n"
"	sall	$4, %eax\n"
"	addl	%ebp, %eax\n"
"	movl	%eax, 4(%esp)\n"
"	subl	$16, %edx\n"
"	subl	$1, 104(%esp)\n"
"	movl	%edx, 8(%esp)\n"
"	movl	%ebp, (%esp)\n"
"	call	_ZSt19__move_median_firstIP5QueryEvT_S2_S2_\n"
"	movl	100(%esp), %eax\n"
"	movl	44(%esp), %ebx\n"
"	jmp	.L97\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L100:\n"
"	movl	40(%esp), %eax\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L91:\n"
"	cmpl	%eax, %ebx\n"
"	jae	.L113\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L95:\n"
"	movl	4(%ebx), %edx\n"
"	movl	(%ebx), %edi\n"
"	movl	%edx, 40(%esp)\n"
"	movl	(%eax), %edx\n"
"	movl	%edx, (%ebx)\n"
"	movl	4(%eax), %edx\n"
"	movl	%edx, 4(%ebx)\n"
"	movl	8(%eax), %edx\n"
"	movl	%edx, 8(%ebx)\n"
"	movl	12(%eax), %edx\n"
"	movl	%edx, 12(%ebx)\n"
"	addl	$16, %ebx\n"
"	movl	%edi, (%eax)\n"
"	movl	40(%esp), %edi\n"
"	movl	%esi, 8(%eax)\n"
"	movl	%ecx, 12(%eax)\n"
"	movl	%edi, 4(%eax)\n"
".L97:\n"
"	movl	8(%ebp), %edx\n"
"	movl	12(%ebx), %ecx\n"
"	movl	8(%ebx), %esi\n"
"	movl	%edx, 36(%esp)\n"
"	movl	12(%ebp), %edx\n"
"	cmpl	%edx, %ecx\n"
"	jg	.L87\n"
"	jl	.L110\n"
"	cmpl	36(%esp), %esi\n"
"	jae	.L87\n"
".L110:\n"
"	movl	36(%esp), %edi\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L108:\n"
"	addl	$16, %ebx\n"
"	movl	12(%ebx), %ecx\n"
"	movl	8(%ebx), %esi\n"
"	cmpl	%edx, %ecx\n"
"	jl	.L108\n"
"	jg	.L111\n"
"	cmpl	%edi, %esi\n"
"	jb	.L108\n"
".L111:\n"
"	movl	%edi, 36(%esp)\n"
".L87:\n"
"	cmpl	%edx, -4(%eax)\n"
"	leal	-16(%eax), %edi\n"
"	movl	%edi, 40(%esp)\n"
"	jl	.L100\n"
"	jg	.L101\n"
"	movl	36(%esp), %edi\n"
"	cmpl	%edi, -8(%eax)\n"
"	jbe	.L100\n"
".L101:\n"
"	movl	40(%esp), %eax\n"
"	movl	36(%esp), %edi\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L109:\n"
"	subl	$16, %eax\n"
"	cmpl	%edx, 12(%eax)\n"
"	jg	.L109\n"
"	jl	.L91\n"
"	cmpl	%edi, 8(%eax)\n"
"	ja	.L109\n"
"	cmpl	%eax, %ebx\n"
"	.p2align 4,,6\n"
"	jb	.L95\n"
".L113:\n"
"	movl	104(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	movl	%ebx, (%esp)\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%edx, 4(%esp)\n"
"	call	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_\n"
"	movl	%ebx, %eax\n"
"	subl	%ebp, %eax\n"
"	cmpl	$271, %eax\n"
"	jle	.L82\n"
"	movl	104(%esp), %ecx\n"
"	movl	%ebx, 100(%esp)\n"
"	testl	%ecx, %ecx\n"
"	jne	.L85\n"
".L98:\n"
"	movl	100(%esp), %eax\n"
"	movl	%ebp, (%esp)\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%eax, 4(%esp)\n"
"	call	_ZSt13__heap_selectIP5QueryEvT_S2_S2_\n"
"	movl	100(%esp), %ebx\n"
".L86:\n"
"	movl	0(%ebp), %esi\n"
"	subl	$16, %ebx\n"
"	movl	(%ebx), %edi\n"
"	movl	4(%ebx), %ecx\n"
"	movl	8(%ebx), %edx\n"
"	movl	%esi, (%ebx)\n"
"	movl	4(%ebp), %esi\n"
"	movl	12(%ebx), %eax\n"
"	movl	%edi, 48(%esp)\n"
"	movl	%ecx, 52(%esp)\n"
"	movl	%esi, 4(%ebx)\n"
"	movl	8(%ebp), %esi\n"
"	movl	%eax, 60(%esp)\n"
"	movl	%edx, 56(%esp)\n"
"	movl	%esi, 8(%ebx)\n"
"	movl	12(%ebp), %esi\n"
"	movl	%esi, 12(%ebx)\n"
"	movl	%ebx, %esi\n"
"	subl	%ebp, %esi\n"
"	movl	%eax, 24(%esp)\n"
"	movl	%esi, %eax\n"
"	sarl	$4, %eax\n"
"	movl	%edi, 12(%esp)\n"
"	movl	%ecx, 16(%esp)\n"
"	movl	%edx, 20(%esp)\n"
"	movl	%eax, 8(%esp)\n"
"	movl	$0, 4(%esp)\n"
"	movl	%ebp, (%esp)\n"
"	call	_ZSt13__adjust_heapIP5QueryiS0_EvT_T0_S3_T1_\n"
"	cmpl	$31, %esi\n"
"	jg	.L86\n"
".L82:\n"
"	addl	$76, %esp\n"
"	.cfi_def_cfa_offset 20\n"
"	popl	%ebx\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
"	.cfi_endproc\n"
".LFE433:\n"
"	.size	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_, .-_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_\n"
"	.section	.rodata.str1.1,\"aMS\",@progbits,1\n"
".LC0:\n"
"	.string	\"%d%d%d%d%d%d%d%d\"\n"
".LC1:\n"
"	.string	\"%lld%lld\"\n"
"	.globl	__moddi3\n"
"	.globl	__divdi3\n"
".LC2:\n"
"	.string	\"%lld\n\"\n"
"	.text\n"
"	.p2align 4,,15\n"
"	.globl	_Z5solvev\n"
"	.type	_Z5solvev, @function\n"
"_Z5solvev:\n"
".LFB430:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	pushl	%edi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_offset 7, -12\n"
"	pushl	%esi\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_offset 6, -16\n"
"	pushl	%ebx\n"
"	.cfi_def_cfa_offset 20\n"
"	.cfi_offset 3, -20\n"
"	subl	$252, %esp\n"
"	.cfi_def_cfa_offset 272\n"
"	movl	$160080, 8(%esp)\n"
"	movl	$0, 4(%esp)\n"
"	movl	$ans, (%esp)\n"
"	call	memset\n"
"	movl	$80056, 8(%esp)\n"
"	movl	$0, 4(%esp)\n"
"	movl	$hashPos, (%esp)\n"
"	call	memset\n"
"	movl	$80056, 8(%esp)\n"
"	movl	$0, 4(%esp)\n"
"	movl	$hashAcc, (%esp)\n"
"	call	memset\n"
"	leal	236(%esp), %eax\n"
"	movl	%eax, 32(%esp)\n"
"	leal	232(%esp), %eax\n"
"	movl	%eax, 28(%esp)\n"
"	leal	228(%esp), %eax\n"
"	movl	%eax, 24(%esp)\n"
"	leal	224(%esp), %eax\n"
"	movl	%eax, 20(%esp)\n"
"	leal	220(%esp), %eax\n"
"	movl	%eax, 16(%esp)\n"
"	leal	216(%esp), %eax\n"
"	movl	%eax, 12(%esp)\n"
"	leal	212(%esp), %eax\n"
"	movl	%eax, 8(%esp)\n"
"	leal	208(%esp), %eax\n"
"	movl	%eax, 4(%esp)\n"
"	movl	$.LC0, (%esp)\n"
"	call	scanf\n"
"	movl	236(%esp), %eax\n"
"	testl	%eax, %eax\n"
"	jle	.L115\n"
"	movl	$query+8, %ebx\n"
"	xorl	%esi, %esi\n"
"	leal	200(%esp), %edi\n"
"	leal	192(%esp), %ebp\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L116:\n"
"	movl	%edi, 8(%esp)\n"
"	movl	%ebp, 4(%esp)\n"
"	movl	$.LC1, (%esp)\n"
"	call	scanf\n"
"	movl	192(%esp), %eax\n"
"	movl	196(%esp), %edx\n"
"	movl	%esi, -8(%ebx)\n"
"	movl	%esi, 8(%ebx)\n"
"	addl	$-1, %eax\n"
"	movl	%eax, (%ebx)\n"
"	movl	200(%esp), %eax\n"
"	adcl	$-1, %edx\n"
"	movl	%edx, 4(%ebx)\n"
"	movl	204(%esp), %edx\n"
"	addl	$1, %esi\n"
"	movl	$-1, -4(%ebx)\n"
"	movl	$1, 12(%ebx)\n"
"	movl	%eax, 16(%ebx)\n"
"	movl	236(%esp), %eax\n"
"	movl	%edx, 20(%ebx)\n"
"	addl	$32, %ebx\n"
"	cmpl	%esi, %eax\n"
"	jg	.L116\n"
".L115:\n"
"	leal	(%eax,%eax), %ecx\n"
"	sall	$5, %eax\n"
"	addl	$query, %eax\n"
"	cmpl	$query, %eax\n"
"	movl	%ecx, 84(%esp)\n"
"	movl	%eax, 168(%esp)\n"
"	je	.L117\n"
"	movl	%eax, %ebx\n"
"	movl	168(%esp), %ecx\n"
"	movl	$31, %eax\n"
"	subl	$query, %ebx\n"
"	movl	%ebx, %edx\n"
"	sarl	$4, %edx\n"
"	bsrl	%edx, %edx\n"
"	xorl	$31, %edx\n"
"	subl	%edx, %eax\n"
"	addl	%eax, %eax\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%ecx, 4(%esp)\n"
"	movl	$query, (%esp)\n"
"	call	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_\n"
"	cmpl	$271, %ebx\n"
"	jle	.L118\n"
"	movl	$query+256, 4(%esp)\n"
"	movl	$query, (%esp)\n"
"	call	_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	cmpl	$query+256, 168(%esp)\n"
"	je	.L117\n"
"	movl	168(%esp), %esi\n"
"	movl	$query+256, %ebx\n"
".L119:\n"
"	movl	%ebx, (%esp)\n"
"	addl	$16, %ebx\n"
"	call	_ZSt25__unguarded_linear_insertIP5QueryEvT_\n"
"	cmpl	%ebx, %esi\n"
"	jne	.L119\n"
".L117:\n"
"	movl	212(%esp), %ecx\n"
"	movl	208(%esp), %edi\n"
"	movl	84(%esp), %esi\n"
"	movl	%ecx, %edx\n"
"	movl	%edi, %eax\n"
"	sarl	$31, %eax\n"
"	sarl	$31, %edx\n"
"	testl	%esi, %esi\n"
"	movl	%edi, 72(%esp)\n"
"	movl	%eax, 76(%esp)\n"
"	movl	%ecx, 64(%esp)\n"
"	movl	%ecx, 96(%esp)\n"
"	movl	%edx, 100(%esp)\n"
"	je	.L164\n"
"	movl	query+12, %ebx\n"
"	movl	query+8, %ecx\n"
"	movl	$0, 80(%esp)\n"
"	movl	%ebx, %edx\n"
"	orl	%ecx, %edx\n"
"	je	.L181\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L122:\n"
"	movl	232(%esp), %edx\n"
"	movl	$0, 60(%esp)\n"
"	movl	%edx, %eax\n"
"	movl	%edx, 136(%esp)\n"
"	sarl	$31, %edx\n"
"	movl	%eax, 88(%esp)\n"
"	movl	136(%esp), %eax\n"
"	movl	%edx, 92(%esp)\n"
"	movl	76(%esp), %edx\n"
"	xorl	92(%esp), %edx\n"
"	xorl	%edi, %eax\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	movzbl	%al, %eax\n"
"	movl	%eax, 56(%esp)\n"
"	movl	%ecx, %eax\n"
"	xorl	$1, %eax\n"
"	orl	%ebx, %eax\n"
"	je	.L187\n"
".L125:\n"
"	movl	64(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	xorl	136(%esp), %eax\n"
"	xorl	92(%esp), %edx\n"
"	movl	$0, 68(%esp)\n"
"	orl	%edx, %eax\n"
"	movl	60(%esp), %edx\n"
"	sete	%al\n"
"	movzbl	%al, %eax\n"
"	movl	%eax, 64(%esp)\n"
"	movl	56(%esp), %eax\n"
"	addl	%eax, 64(%esp)\n"
"	movl	%ecx, %eax\n"
"	adcl	%edx, 68(%esp)\n"
"	xorl	$2, %eax\n"
"	orl	%ebx, %eax\n"
"	je	.L188\n"
".L127:\n"
"	movl	228(%esp), %ecx\n"
"	movl	%ecx, %eax\n"
"	imull	%ecx, %eax\n"
"	addl	$1, %eax\n"
"	cmpl	$2, %eax\n"
"	movl	%eax, 160(%esp)\n"
"	jle	.L129\n"
"	movl	216(%esp), %ebx\n"
"	movl	%ecx, 128(%esp)\n"
"	movl	$3, 104(%esp)\n"
"	movl	$0, 108(%esp)\n"
"	movl	%ebx, %edx\n"
"	movl	%ebx, 180(%esp)\n"
"	sarl	$31, %edx\n"
"	movl	%ebx, 112(%esp)\n"
"	movl	220(%esp), %ebx\n"
"	movl	%edx, 116(%esp)\n"
"	movl	%ebx, 184(%esp)\n"
"	movl	%ebx, %edx\n"
"	movl	%ebx, 120(%esp)\n"
"	movl	224(%esp), %ebx\n"
"	sarl	$31, %edx\n"
"	movl	%edx, 124(%esp)\n"
"	movl	%ebx, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%edx, 156(%esp)\n"
"	movl	%ecx, %edx\n"
"	movl	72(%esp), %ecx\n"
"	sarl	$31, %edx\n"
"	movl	%ebx, 188(%esp)\n"
"	movl	%ebx, 152(%esp)\n"
"	movl	76(%esp), %ebx\n"
"	movl	%edx, 132(%esp)\n"
"	jmp	.L135\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L130:\n"
"	movl	92(%esp), %eax\n"
"	movl	88(%esp), %edx\n"
"	xorl	176(%esp), %eax\n"
"	xorl	140(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	je	.L189\n"
"	addl	$1, 104(%esp)\n"
"	movl	104(%esp), %ebx\n"
"	adcl	$0, 108(%esp)\n"
"	cmpl	%ebx, 160(%esp)\n"
"	jl	.L129\n"
"	movl	140(%esp), %eax\n"
"	movl	176(%esp), %edx\n"
"	movl	96(%esp), %ecx\n"
"	movl	100(%esp), %ebx\n"
"	movl	%eax, 96(%esp)\n"
"	movl	%edx, 100(%esp)\n"
".L135:\n"
"	movl	104(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	imull	112(%esp), %edx\n"
"	movl	%eax, 144(%esp)\n"
"	movl	116(%esp), %eax\n"
"	imull	96(%esp), %eax\n"
"	leal	(%eax,%edx), %esi\n"
"	movl	112(%esp), %eax\n"
"	mull	96(%esp)\n"
"	addl	%esi, %edx\n"
"	movl	%eax, 56(%esp)\n"
"	movl	120(%esp), %eax\n"
"	movl	%edx, 60(%esp)\n"
"	movl	124(%esp), %edx\n"
"	imull	%ebx, %eax\n"
"	imull	%ecx, %edx\n"
"	leal	(%edx,%eax), %ebx\n"
"	movl	120(%esp), %eax\n"
"	mull	%ecx\n"
"	movl	128(%esp), %ecx\n"
"	addl	%ebx, %edx\n"
"	movl	132(%esp), %ebx\n"
"	movl	%eax, 72(%esp)\n"
"	movl	72(%esp), %eax\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	addl	56(%esp), %eax\n"
"	adcl	60(%esp), %edx\n"
"	addl	152(%esp), %eax\n"
"	adcl	156(%esp), %edx\n"
"	movl	%ebx, 12(%esp)\n"
"	movl	%ecx, 8(%esp)\n"
"	movl	%eax, (%esp)\n"
"	movl	%edx, 4(%esp)\n"
"	call	__moddi3\n"
"	movl	80(%esp), %ebx\n"
"	movl	%eax, 140(%esp)\n"
"	movl	88(%esp), %eax\n"
"	movl	%edx, 176(%esp)\n"
"	movl	92(%esp), %edx\n"
"	xorl	140(%esp), %eax\n"
"	xorl	176(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	xorl	%edx, %edx\n"
"	movzbl	%al, %eax\n"
"	addl	%eax, 64(%esp)\n"
"	adcl	%edx, 68(%esp)\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L130\n"
"	movl	%ebx, %eax\n"
"	movl	104(%esp), %edx\n"
"	sall	$4, %eax\n"
"	movl	query+8(%eax), %edi\n"
"	movl	query+12(%eax), %esi\n"
"	movl	108(%esp), %eax\n"
"	xorl	%edi, %edx\n"
"	xorl	%esi, %eax\n"
"	orl	%edx, %eax\n"
"	jne	.L130\n"
"	addl	$1, %ebx\n"
"	movl	%ebx, %ecx\n"
"	sall	$4, %ecx\n"
"	addl	$query+8, %ecx\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L131:\n"
"	movl	80(%esp), %eax\n"
"	movl	%ebx, 80(%esp)\n"
"	sall	$4, %eax\n"
"	movl	query(%eax), %ebp\n"
"	movl	query+4(%eax), %eax\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%eax, 52(%esp)\n"
"	movl	%edx, 60(%esp)\n"
"	movl	68(%esp), %edx\n"
"	movl	60(%esp), %eax\n"
"	imull	52(%esp), %edx\n"
"	imull	64(%esp), %eax\n"
"	addl	%edx, %eax\n"
"	movl	%eax, 56(%esp)\n"
"	movl	64(%esp), %eax\n"
"	mull	52(%esp)\n"
"	movl	%eax, 72(%esp)\n"
"	movl	56(%esp), %eax\n"
"	addl	%eax, %edx\n"
"	movl	72(%esp), %eax\n"
"	addl	%eax, ans(,%ebp,8)\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	adcl	%edx, ans+4(,%ebp,8)\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L130\n"
"	addl	$16, %ecx\n"
"	movl	-12(%ecx), %eax\n"
"	movl	-16(%ecx), %edx\n"
"	xorl	%esi, %eax\n"
"	xorl	%edi, %edx\n"
"	orl	%edx, %eax\n"
"	jne	.L130\n"
"	addl	$1, %ebx\n"
"	jmp	.L131\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L188:\n"
"	movl	80(%esp), %edi\n"
"	addl	$1, %edi\n"
"	movl	%edi, %ecx\n"
"	sall	$4, %ecx\n"
"	addl	$query+8, %ecx\n"
".L163:\n"
"	movl	80(%esp), %eax\n"
"	movl	68(%esp), %esi\n"
"	movl	%edi, 80(%esp)\n"
"	sall	$4, %eax\n"
"	movl	query+4(%eax), %ebp\n"
"	movl	query(%eax), %ebx\n"
"	movl	%ebp, %eax\n"
"	sarl	$31, %eax\n"
"	movl	%eax, 60(%esp)\n"
"	movl	60(%esp), %eax\n"
"	imull	%ebp, %esi\n"
"	imull	64(%esp), %eax\n"
"	addl	%eax, %esi\n"
"	movl	64(%esp), %eax\n"
"	mull	%ebp\n"
"	addl	%esi, %edx\n"
"	movl	%eax, 56(%esp)\n"
"	movl	56(%esp), %eax\n"
"	addl	%eax, ans(,%ebx,8)\n"
"	movl	%edx, 60(%esp)\n"
"	movl	60(%esp), %edx\n"
"	adcl	%edx, ans+4(,%ebx,8)\n"
"	cmpl	%edi, 84(%esp)\n"
"	je	.L127\n"
"	addl	$16, %ecx\n"
"	movl	-16(%ecx), %eax\n"
"	xorl	$2, %eax\n"
"	orl	-12(%ecx), %eax\n"
"	jne	.L127\n"
"	addl	$1, %edi\n"
"	jmp	.L163\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L187:\n"
"	movl	80(%esp), %edi\n"
"	addl	$1, %edi\n"
"	movl	%edi, %esi\n"
"	sall	$4, %esi\n"
"	addl	$query+8, %esi\n"
".L162:\n"
"	movl	80(%esp), %eax\n"
"	movl	56(%esp), %ebp\n"
"	movl	%edi, 80(%esp)\n"
"	sall	$4, %eax\n"
"	movl	query+4(%eax), %ecx\n"
"	movl	query(%eax), %ebx\n"
"	movl	56(%esp), %eax\n"
"	movl	%ecx, %edx\n"
"	sarl	$31, %edx\n"
"	imull	%edx, %ebp\n"
"	mull	%ecx\n"
"	addl	%ebp, %edx\n"
"	movl	%edx, 108(%esp)\n"
"	movl	108(%esp), %ecx\n"
"	movl	%eax, 104(%esp)\n"
"	movl	104(%esp), %edx\n"
"	addl	%edx, ans(,%ebx,8)\n"
"	adcl	%ecx, ans+4(,%ebx,8)\n"
"	cmpl	%edi, 84(%esp)\n"
"	je	.L124\n"
"	addl	$16, %esi\n"
"	movl	-16(%esi), %ecx\n"
"	movl	-12(%esi), %ebx\n"
"	movl	%ecx, %eax\n"
"	xorl	$1, %eax\n"
"	orl	%ebx, %eax\n"
"	jne	.L125\n"
"	addl	$1, %edi\n"
"	jmp	.L162\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L190:\n"
"	movl	%esi, 80(%esp)\n"
"	movl	%edx, %edi\n"
".L120:\n"
"	movl	232(%esp), %ecx\n"
"	movl	$0, 60(%esp)\n"
"	movl	%ecx, %edx\n"
"	movl	%ecx, %eax\n"
"	sarl	$31, %edx\n"
"	xorl	%edi, %eax\n"
"	movl	%edx, 92(%esp)\n"
"	movl	76(%esp), %edx\n"
"	xorl	92(%esp), %edx\n"
"	movl	%ecx, 136(%esp)\n"
"	movl	%ecx, 88(%esp)\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	movzbl	%al, %eax\n"
"	movl	%eax, 56(%esp)\n"
".L124:\n"
"	movl	64(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	xorl	88(%esp), %eax\n"
"	xorl	92(%esp), %edx\n"
"	movl	56(%esp), %ecx\n"
"	movl	60(%esp), %ebx\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	movzbl	%al, %eax\n"
"	movl	%eax, 64(%esp)\n"
"	addl	%ecx, 64(%esp)\n"
"	movl	$0, 68(%esp)\n"
"	adcl	%ebx, 68(%esp)\n"
"	jmp	.L127\n"
".L189:\n"
"	movl	144(%esp), %eax\n"
"	movl	96(%esp), %ecx\n"
"	subl	$1, %eax\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%eax, hashPos(,%ecx,8)\n"
"	movl	64(%esp), %eax\n"
"	movl	%edx, hashPos+4(,%ecx,8)\n"
"	movl	68(%esp), %edx\n"
"	addl	$-1, %eax\n"
"	adcl	$-1, %edx\n"
"	movl	%eax, hashAcc(,%ecx,8)\n"
"	movl	%edx, hashAcc+4(,%ecx,8)\n"
"	movl	144(%esp), %ecx\n"
"	movl	%ecx, %ebx\n"
"	movl	%ecx, %esi\n"
"	movl	144(%esp), %ecx\n"
"	sarl	$31, %ebx\n"
"	andl	%ebx, %ecx\n"
"	cmpl	$-1, %ecx\n"
"	je	.L129\n"
"	movl	160(%esp), %eax\n"
"	movl	%esi, %ecx\n"
"	addl	$1, %ecx\n"
"	adcl	$0, %ebx\n"
"	movl	%ecx, 144(%esp)\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	cmpl	%edx, %ebx\n"
"	movl	%ebx, 148(%esp)\n"
"	movl	%eax, 152(%esp)\n"
"	movl	%edx, 156(%esp)\n"
"	jg	.L144\n"
"	jl	.L170\n"
"	movl	160(%esp), %ebx\n"
"	cmpl	%ebx, %ecx\n"
"	jbe	.L170\n"
".L144:\n"
"	movl	80(%esp), %ecx\n"
"	cmpl	%ecx, 84(%esp)\n"
"	jle	.L129\n"
".L172:\n"
"	movl	%ecx, %eax\n"
"	movl	68(%esp), %edx\n"
"	sall	$4, %eax\n"
"	movl	64(%esp), %esi\n"
"	movl	query(%eax), %ebx\n"
"	movl	query+4(%eax), %eax\n"
"	movl	%eax, %edi\n"
"	sarl	$31, %edi\n"
"	imull	%eax, %edx\n"
"	imull	%edi, %esi\n"
"	addl	%edx, %esi\n"
"	mull	64(%esp)\n"
"	addl	%esi, %edx\n"
"	addl	%eax, ans(,%ebx,8)\n"
"	adcl	%edx, ans+4(,%ebx,8)\n"
"	addl	$1, %ecx\n"
"	cmpl	84(%esp), %ecx\n"
"	jne	.L172\n"
".L129:\n"
"	movl	236(%esp), %ebx\n"
"	testl	%ebx, %ebx\n"
"	jle	.L114\n"
"	xorl	%ebx, %ebx\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L159:\n"
"	movl	ans(,%ebx,8), %eax\n"
"	movl	ans+4(,%ebx,8), %edx\n"
"	addl	$1, %ebx\n"
"	movl	$.LC2, 4(%esp)\n"
"	movl	$1, (%esp)\n"
"	movl	%eax, 8(%esp)\n"
"	movl	%edx, 12(%esp)\n"
"	call	__printf_chk\n"
"	cmpl	%ebx, 236(%esp)\n"
"	jg	.L159\n"
".L114:\n"
"	addl	$252, %esp\n"
"	.cfi_remember_state\n"
"	.cfi_def_cfa_offset 20\n"
"	popl	%ebx\n"
"	.cfi_def_cfa_offset 16\n"
"	.cfi_restore 3\n"
"	popl	%esi\n"
"	.cfi_def_cfa_offset 12\n"
"	.cfi_restore 6\n"
"	popl	%edi\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_restore 7\n"
"	popl	%ebp\n"
"	.cfi_def_cfa_offset 4\n"
"	.cfi_restore 5\n"
"	ret\n"
".L181:\n"
"	.cfi_restore_state\n"
"	movl	80(%esp), %esi\n"
"	movl	%edi, %edx\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L180:\n"
"	addl	$1, %esi\n"
"	cmpl	%esi, 84(%esp)\n"
"	je	.L190\n"
"	movl	%esi, %eax\n"
"	sall	$4, %eax\n"
"	movl	query+12(%eax), %ebx\n"
"	movl	query+8(%eax), %ecx\n"
"	movl	%ebx, %eax\n"
"	orl	%ecx, %eax\n"
"	je	.L180\n"
"	movl	%esi, 80(%esp)\n"
"	movl	%edx, %edi\n"
"	jmp	.L122\n"
".L118:\n"
"	movl	168(%esp), %ebx\n"
"	movl	$query, (%esp)\n"
"	movl	%ebx, 4(%esp)\n"
"	call	_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	jmp	.L117\n"
".L170:\n"
"	movl	180(%esp), %eax\n"
"	movl	96(%esp), %ecx\n"
"	movl	100(%esp), %ebx\n"
"	movl	%eax, %edx\n"
"	movl	%eax, 112(%esp)\n"
"	movl	184(%esp), %eax\n"
"	sarl	$31, %edx\n"
"	movl	%edx, 116(%esp)\n"
"	movl	%eax, 120(%esp)\n"
"	movl	%eax, %edx\n"
"	movl	188(%esp), %eax\n"
"	sarl	$31, %edx\n"
"	movl	%edx, 124(%esp)\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%eax, 160(%esp)\n"
"	movl	%edx, 164(%esp)\n"
"	jmp	.L145\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L141:\n"
"	addl	$1, 144(%esp)\n"
"	adcl	$0, 148(%esp)\n"
"	movl	156(%esp), %ebx\n"
"	cmpl	%ebx, 148(%esp)\n"
"	jl	.L167\n"
"	jg	.L144\n"
"	movl	152(%esp), %eax\n"
"	cmpl	%eax, 144(%esp)\n"
"	ja	.L144\n"
".L167:\n"
"	movl	96(%esp), %edx\n"
"	movl	104(%esp), %eax\n"
"	movl	140(%esp), %ecx\n"
"	movl	176(%esp), %ebx\n"
"	movl	%edx, 140(%esp)\n"
"	movl	%eax, 176(%esp)\n"
".L145:\n"
"	movl	116(%esp), %eax\n"
"	movl	176(%esp), %edx\n"
"	imull	140(%esp), %eax\n"
"	imull	112(%esp), %edx\n"
"	leal	(%eax,%edx), %esi\n"
"	movl	112(%esp), %eax\n"
"	mull	140(%esp)\n"
"	addl	%esi, %edx\n"
"	movl	%eax, 56(%esp)\n"
"	movl	120(%esp), %eax\n"
"	movl	%edx, 60(%esp)\n"
"	movl	124(%esp), %edx\n"
"	imull	%ebx, %eax\n"
"	imull	%ecx, %edx\n"
"	leal	(%edx,%eax), %ebx\n"
"	movl	120(%esp), %eax\n"
"	mull	%ecx\n"
"	movl	128(%esp), %ecx\n"
"	addl	%ebx, %edx\n"
"	movl	132(%esp), %ebx\n"
"	movl	%eax, 72(%esp)\n"
"	movl	72(%esp), %eax\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	addl	56(%esp), %eax\n"
"	adcl	60(%esp), %edx\n"
"	addl	160(%esp), %eax\n"
"	adcl	164(%esp), %edx\n"
"	movl	%ebx, 12(%esp)\n"
"	movl	%ecx, 8(%esp)\n"
"	movl	%eax, (%esp)\n"
"	movl	%edx, 4(%esp)\n"
"	call	__moddi3\n"
"	movl	80(%esp), %ebx\n"
"	movl	%eax, 96(%esp)\n"
"	movl	88(%esp), %eax\n"
"	movl	%edx, 104(%esp)\n"
"	movl	92(%esp), %edx\n"
"	xorl	96(%esp), %eax\n"
"	xorl	104(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	xorl	%edx, %edx\n"
"	movzbl	%al, %eax\n"
"	addl	%eax, 64(%esp)\n"
"	adcl	%edx, 68(%esp)\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L138\n"
"	movl	%ebx, %eax\n"
"	movl	144(%esp), %edx\n"
"	sall	$4, %eax\n"
"	movl	query+8(%eax), %edi\n"
"	movl	query+12(%eax), %esi\n"
"	movl	148(%esp), %eax\n"
"	xorl	%edi, %edx\n"
"	xorl	%esi, %eax\n"
"	orl	%edx, %eax\n"
"	je	.L191\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L138:\n"
"	movl	92(%esp), %eax\n"
"	movl	88(%esp), %edx\n"
"	xorl	104(%esp), %eax\n"
"	xorl	96(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	jne	.L141\n"
"	movl	140(%esp), %ecx\n"
"	movl	hashPos+4(,%ecx,8), %edx\n"
"	movl	hashPos(,%ecx,8), %eax\n"
"	movl	%edx, %ebx\n"
"	orl	%eax, %ebx\n"
"	jne	.L192\n"
"	movl	144(%esp), %eax\n"
"	movl	140(%esp), %ecx\n"
"	movl	148(%esp), %edx\n"
"	addl	$-1, %eax\n"
"	movl	%eax, hashPos(,%ecx,8)\n"
"	movl	64(%esp), %eax\n"
"	adcl	$-1, %edx\n"
"	movl	%edx, hashPos+4(,%ecx,8)\n"
"	movl	68(%esp), %edx\n"
"	addl	$-1, %eax\n"
"	movl	%eax, hashAcc(,%ecx,8)\n"
"	adcl	$-1, %edx\n"
"	movl	%edx, hashAcc+4(,%ecx,8)\n"
"	jmp	.L141\n"
".L191:\n"
"	addl	$1, %ebx\n"
"	movl	%ebx, %ecx\n"
"	sall	$4, %ecx\n"
"	addl	$query+8, %ecx\n"
"	jmp	.L139\n"
".L195:\n"
"	addl	$1, %ebx\n"
".L139:\n"
"	movl	80(%esp), %eax\n"
"	movl	%ebx, 80(%esp)\n"
"	sall	$4, %eax\n"
"	movl	query(%eax), %ebp\n"
"	movl	query+4(%eax), %eax\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%eax, 180(%esp)\n"
"	movl	%edx, 60(%esp)\n"
"	movl	68(%esp), %edx\n"
"	movl	60(%esp), %eax\n"
"	imull	180(%esp), %edx\n"
"	imull	64(%esp), %eax\n"
"	addl	%edx, %eax\n"
"	movl	%eax, 56(%esp)\n"
"	movl	64(%esp), %eax\n"
"	mull	180(%esp)\n"
"	movl	%eax, 72(%esp)\n"
"	movl	56(%esp), %eax\n"
"	addl	%eax, %edx\n"
"	movl	72(%esp), %eax\n"
"	addl	%eax, ans(,%ebp,8)\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	adcl	%edx, ans+4(,%ebp,8)\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L138\n"
"	addl	$16, %ecx\n"
"	movl	-12(%ecx), %eax\n"
"	movl	-16(%ecx), %edx\n"
"	xorl	%esi, %eax\n"
"	xorl	%edi, %edx\n"
"	orl	%edx, %eax\n"
"	jne	.L138\n"
"	jmp	.L195\n"
".L164:\n"
"	movl	$0, 80(%esp)\n"
"	jmp	.L120\n"
".L192:\n"
"	movl	%eax, 104(%esp)\n"
"	movl	176(%esp), %eax\n"
"	movl	%edx, 108(%esp)\n"
"	andl	%ecx, %eax\n"
"	cmpl	$-1, %eax\n"
"	je	.L144\n"
"	movl	144(%esp), %ecx\n"
"	movl	148(%esp), %ebx\n"
"	addl	$-1, %ecx\n"
"	adcl	$-1, %ebx\n"
"	movl	%ebx, 156(%esp)\n"
"	movl	140(%esp), %ebx\n"
"	movl	%ecx, 152(%esp)\n"
"	movl	hashAcc(,%ebx,8), %ecx\n"
"	movl	hashAcc+4(,%ebx,8), %ebx\n"
"	movl	%ecx, 56(%esp)\n"
"	movl	64(%esp), %ecx\n"
"	movl	%ebx, 60(%esp)\n"
"	movl	68(%esp), %ebx\n"
"	addl	$-1, %ecx\n"
"	adcl	$-1, %ebx\n"
"	movl	%ecx, 64(%esp)\n"
"	movl	56(%esp), %ecx\n"
"	subl	%ecx, 64(%esp)\n"
"	movl	152(%esp), %ecx\n"
"	movl	%ebx, 68(%esp)\n"
"	movl	60(%esp), %ebx\n"
"	sbbl	%ebx, 68(%esp)\n"
"	movl	156(%esp), %ebx\n"
"	subl	104(%esp), %ecx\n"
"	sbbl	108(%esp), %ebx\n"
"	movl	%ecx, 112(%esp)\n"
"	movl	%ebx, 116(%esp)\n"
"	movl	80(%esp), %ebx\n"
"	cmpl	%ebx, 84(%esp)\n"
"	jle	.L148\n"
"	movl	%ebx, %ebp\n"
"	sall	$4, %ebp\n"
"	addl	$query+8, %ebp\n"
"	movl	%ebx, 72(%esp)\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L149:\n"
"	movl	72(%esp), %eax\n"
"	movl	0(%ebp), %esi\n"
"	movl	4(%ebp), %edi\n"
"	sall	$4, %eax\n"
"	movl	query+4(%eax), %ebx\n"
"	movl	query(%eax), %ecx\n"
"	movl	%ebx, %eax\n"
"	sarl	$31, %eax\n"
"	movl	%eax, 100(%esp)\n"
"	movl	60(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	subl	104(%esp), %esi\n"
"	sbbl	108(%esp), %edi\n"
"	imull	%ebx, %eax\n"
"	imull	56(%esp), %edx\n"
"	movl	%ecx, 88(%esp)\n"
"	movl	%esi, (%esp)\n"
"	movl	%edi, 4(%esp)\n"
"	leal	(%eax,%edx), %ecx\n"
"	movl	56(%esp), %eax\n"
"	movl	%ebx, 96(%esp)\n"
"	mull	%ebx\n"
"	movl	%eax, 120(%esp)\n"
"	movl	88(%esp), %eax\n"
"	addl	%ecx, %edx\n"
"	movl	%edx, 124(%esp)\n"
"	movl	120(%esp), %edx\n"
"	movl	124(%esp), %ecx\n"
"	addl	ans(,%eax,8), %edx\n"
"	adcl	ans+4(,%eax,8), %ecx\n"
"	movl	%edx, 120(%esp)\n"
"	movl	112(%esp), %edx\n"
"	movl	%ecx, 124(%esp)\n"
"	movl	116(%esp), %ecx\n"
"	movl	%edx, 8(%esp)\n"
"	movl	%ecx, 12(%esp)\n"
"	call	__divdi3\n"
"	imull	64(%esp), %edx\n"
"	movl	%eax, %ecx\n"
"	movl	68(%esp), %eax\n"
"	imull	%ecx, %eax\n"
"	addl	%edx, %eax\n"
"	movl	%eax, 128(%esp)\n"
"	movl	64(%esp), %eax\n"
"	mull	%ecx\n"
"	movl	128(%esp), %ecx\n"
"	addl	%ecx, %edx\n"
"	movl	%eax, 160(%esp)\n"
"	movl	%edx, %ecx\n"
"	movl	100(%esp), %eax\n"
"	imull	160(%esp), %eax\n"
"	imull	%ebx, %ecx\n"
"	movl	%edx, 164(%esp)\n"
"	addl	%eax, %ecx\n"
"	movl	160(%esp), %eax\n"
"	mull	%ebx\n"
"	addl	%ecx, %edx\n"
"	movl	%eax, 96(%esp)\n"
"	movl	88(%esp), %ecx\n"
"	movl	%edx, 100(%esp)\n"
"	movl	96(%esp), %eax\n"
"	movl	100(%esp), %edx\n"
"	addl	120(%esp), %eax\n"
"	adcl	124(%esp), %edx\n"
"	movl	116(%esp), %ebx\n"
"	movl	%eax, ans(,%ecx,8)\n"
"	movl	%edx, ans+4(,%ecx,8)\n"
"	movl	112(%esp), %ecx\n"
"	movl	%esi, (%esp)\n"
"	movl	%ebx, 12(%esp)\n"
"	movl	%edi, 4(%esp)\n"
"	movl	%ecx, 8(%esp)\n"
"	call	__moddi3\n"
"	movl	84(%esp), %ebx\n"
"	addl	104(%esp), %eax\n"
"	adcl	108(%esp), %edx\n"
"	addl	$1, 72(%esp)\n"
"	movl	%eax, 0(%ebp)\n"
"	movl	%edx, 4(%ebp)\n"
"	addl	$16, %ebp\n"
"	cmpl	%ebx, 72(%esp)\n"
"	jne	.L149\n"
".L148:\n"
"	movl	80(%esp), %ebx\n"
"	sall	$4, %ebx\n"
"	addl	$query, %ebx\n"
"	cmpl	%ebx, 168(%esp)\n"
"	je	.L150\n"
"	movl	168(%esp), %esi\n"
"	movl	$31, %edx\n"
"	movl	168(%esp), %ecx\n"
"	movl	%ebx, (%esp)\n"
"	subl	%ebx, %esi\n"
"	movl	%esi, %eax\n"
"	sarl	$4, %eax\n"
"	bsrl	%eax, %eax\n"
"	xorl	$31, %eax\n"
"	subl	%eax, %edx\n"
"	addl	%edx, %edx\n"
"	movl	%edx, 8(%esp)\n"
"	movl	%ecx, 4(%esp)\n"
"	call	_ZSt16__introsort_loopIP5QueryiEvT_S2_T0_\n"
"	cmpl	$271, %esi\n"
"	jle	.L151\n"
"	leal	256(%ebx), %esi\n"
"	movl	%esi, 4(%esp)\n"
"	movl	%ebx, (%esp)\n"
"	call	_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	cmpl	%esi, 168(%esp)\n"
"	je	.L186\n"
".L173:\n"
"	movl	%esi, (%esp)\n"
"	addl	$16, %esi\n"
"	call	_ZSt25__unguarded_linear_insertIP5QueryEvT_\n"
"	cmpl	%esi, 168(%esp)\n"
"	jne	.L173\n"
".L186:\n"
"	movl	140(%esp), %ebx\n"
"	movl	hashAcc(,%ebx,8), %ecx\n"
"	movl	hashAcc+4(,%ebx,8), %ebx\n"
"	movl	%ecx, 56(%esp)\n"
"	movl	232(%esp), %ecx\n"
"	movl	%ebx, 60(%esp)\n"
"	movl	%ecx, 136(%esp)\n"
".L150:\n"
"	movl	104(%esp), %ecx\n"
"	movl	108(%esp), %ebx\n"
"	addl	$1, %ecx\n"
"	adcl	$0, %ebx\n"
"	cmpl	%ebx, 156(%esp)\n"
"	movl	%ecx, 104(%esp)\n"
"	movl	%ebx, 108(%esp)\n"
"	jl	.L129\n"
"	jg	.L171\n"
"	cmpl	%ecx, 152(%esp)\n"
"	jb	.L129\n"
".L171:\n"
"	movl	136(%esp), %eax\n"
"	movl	56(%esp), %ecx\n"
"	movl	60(%esp), %ebx\n"
"	movl	%eax, %edx\n"
"	movl	%eax, 128(%esp)\n"
"	movl	216(%esp), %eax\n"
"	sarl	$31, %edx\n"
"	addl	$1, %ecx\n"
"	adcl	$0, %ebx\n"
"	movl	%ebx, 60(%esp)\n"
"	movl	%eax, 88(%esp)\n"
"	movl	%eax, %ebx\n"
"	movl	220(%esp), %eax\n"
"	movl	%edx, 132(%esp)\n"
"	sarl	$31, %ebx\n"
"	movl	%ecx, 56(%esp)\n"
"	movl	%ebx, 92(%esp)\n"
"	movl	%eax, %edx\n"
"	movl	%eax, 96(%esp)\n"
"	movl	224(%esp), %eax\n"
"	sarl	$31, %edx\n"
"	movl	%edx, 100(%esp)\n"
"	movl	%eax, %ecx\n"
"	movl	%eax, 168(%esp)\n"
"	movl	228(%esp), %eax\n"
"	sarl	$31, %ecx\n"
"	movl	%ecx, 172(%esp)\n"
"	movl	140(%esp), %ecx\n"
"	movl	%eax, %ebx\n"
"	movl	%eax, 152(%esp)\n"
"	movl	132(%esp), %eax\n"
"	sarl	$31, %ebx\n"
"	movl	%ebx, 156(%esp)\n"
"	movl	176(%esp), %ebx\n"
"	movl	%eax, 120(%esp)\n"
"	jmp	.L158\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L155:\n"
"	addl	$1, 104(%esp)\n"
"	adcl	$0, 108(%esp)\n"
"	movl	108(%esp), %eax\n"
"	movl	104(%esp), %edx\n"
"	xorl	148(%esp), %eax\n"
"	xorl	144(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	je	.L129\n"
"	movl	112(%esp), %edx\n"
"	movl	140(%esp), %eax\n"
"	movl	136(%esp), %ecx\n"
"	movl	120(%esp), %ebx\n"
"	movl	%edx, 136(%esp)\n"
"	movl	%eax, 120(%esp)\n"
".L158:\n"
"	movl	92(%esp), %eax\n"
"	movl	120(%esp), %edx\n"
"	imull	136(%esp), %eax\n"
"	imull	88(%esp), %edx\n"
"	leal	(%eax,%edx), %esi\n"
"	movl	88(%esp), %eax\n"
"	mull	136(%esp)\n"
"	addl	%esi, %edx\n"
"	movl	%eax, 64(%esp)\n"
"	movl	96(%esp), %eax\n"
"	movl	%edx, 68(%esp)\n"
"	movl	100(%esp), %edx\n"
"	imull	%ebx, %eax\n"
"	imull	%ecx, %edx\n"
"	leal	(%edx,%eax), %ebx\n"
"	movl	96(%esp), %eax\n"
"	mull	%ecx\n"
"	movl	152(%esp), %ecx\n"
"	addl	%ebx, %edx\n"
"	movl	156(%esp), %ebx\n"
"	movl	%eax, 72(%esp)\n"
"	movl	72(%esp), %eax\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	addl	64(%esp), %eax\n"
"	adcl	68(%esp), %edx\n"
"	addl	168(%esp), %eax\n"
"	adcl	172(%esp), %edx\n"
"	movl	%ebx, 12(%esp)\n"
"	movl	%ecx, 8(%esp)\n"
"	movl	%eax, (%esp)\n"
"	movl	%edx, 4(%esp)\n"
"	call	__moddi3\n"
"	movl	84(%esp), %ebx\n"
"	movl	%eax, 112(%esp)\n"
"	movl	128(%esp), %eax\n"
"	movl	%edx, 140(%esp)\n"
"	movl	132(%esp), %edx\n"
"	xorl	112(%esp), %eax\n"
"	xorl	140(%esp), %edx\n"
"	orl	%edx, %eax\n"
"	sete	%al\n"
"	xorl	%edx, %edx\n"
"	movzbl	%al, %eax\n"
"	addl	%eax, 56(%esp)\n"
"	adcl	%edx, 60(%esp)\n"
"	cmpl	%ebx, 80(%esp)\n"
"	je	.L155\n"
"	movl	80(%esp), %eax\n"
"	movl	104(%esp), %edx\n"
"	sall	$4, %eax\n"
"	movl	query+8(%eax), %edi\n"
"	movl	query+12(%eax), %esi\n"
"	movl	108(%esp), %eax\n"
"	xorl	%edi, %edx\n"
"	xorl	%esi, %eax\n"
"	orl	%edx, %eax\n"
"	jne	.L155\n"
"	movl	80(%esp), %ebx\n"
"	addl	$1, %ebx\n"
"	movl	%ebx, %ecx\n"
"	sall	$4, %ecx\n"
"	addl	$query+8, %ecx\n"
"	jmp	.L156\n"
".L196:\n"
"	addl	$1, %ebx\n"
".L156:\n"
"	movl	80(%esp), %eax\n"
"	movl	%ebx, 80(%esp)\n"
"	sall	$4, %eax\n"
"	movl	query(%eax), %ebp\n"
"	movl	query+4(%eax), %eax\n"
"	movl	%eax, %edx\n"
"	sarl	$31, %edx\n"
"	movl	%eax, 176(%esp)\n"
"	movl	%edx, 68(%esp)\n"
"	movl	60(%esp), %edx\n"
"	movl	68(%esp), %eax\n"
"	imull	176(%esp), %edx\n"
"	imull	56(%esp), %eax\n"
"	addl	%edx, %eax\n"
"	movl	%eax, 64(%esp)\n"
"	movl	56(%esp), %eax\n"
"	mull	176(%esp)\n"
"	movl	%eax, 72(%esp)\n"
"	movl	64(%esp), %eax\n"
"	addl	%eax, %edx\n"
"	movl	72(%esp), %eax\n"
"	addl	%eax, ans(,%ebp,8)\n"
"	movl	%edx, 76(%esp)\n"
"	movl	76(%esp), %edx\n"
"	adcl	%edx, ans+4(,%ebp,8)\n"
"	cmpl	%ebx, 84(%esp)\n"
"	je	.L155\n"
"	addl	$16, %ecx\n"
"	movl	-12(%ecx), %eax\n"
"	movl	-16(%ecx), %edx\n"
"	xorl	%esi, %eax\n"
"	xorl	%edi, %edx\n"
"	orl	%edx, %eax\n"
"	jne	.L155\n"
"	jmp	.L196\n"
".L151:\n"
"	movl	168(%esp), %ecx\n"
"	movl	%ebx, (%esp)\n"
"	movl	%ecx, 4(%esp)\n"
"	call	_ZSt16__insertion_sortIP5QueryEvT_S2_\n"
"	jmp	.L186\n"
"	.cfi_endproc\n"
".LFE430:\n"
"	.size	_Z5solvev, .-_Z5solvev\n"
"	.section	.rodata.str1.1\n"
".LC3:\n"
"	.string	\"%d\"\n"
"	.section	.text.startup,\"ax\",@progbits\n"
"	.p2align 4,,15\n"
"	.globl	main\n"
"	.type	main, @function\n"
"main:\n"
".LFB431:\n"
"	.cfi_startproc\n"
"	pushl	%ebp\n"
"	.cfi_def_cfa_offset 8\n"
"	.cfi_offset 5, -8\n"
"	movl	%esp, %ebp\n"
"	.cfi_def_cfa_register 5\n"
"	andl	$-16, %esp\n"
"	subl	$32, %esp\n"
"	leal	28(%esp), %eax\n"
"	movl	%eax, 4(%esp)\n"
"	movl	$.LC3, (%esp)\n"
"	call	scanf\n"
"	jmp	.L202\n"
"	.p2align 4,,7\n"
"	.p2align 3\n"
".L203:\n"
"	call	_Z5solvev\n"
".L202:\n"
"	movl	28(%esp), %eax\n"
"	leal	-1(%eax), %edx\n"
"	testl	%eax, %eax\n"
"	movl	%edx, 28(%esp)\n"
"	jne	.L203\n"
"	xorl	%eax, %eax\n"
"	leave\n"
"	.cfi_restore 5\n"
"	.cfi_def_cfa 4, 4\n"
"	ret\n"
"	.cfi_endproc\n"
".LFE431:\n"
"	.size	main, .-main\n"
"	.globl	query\n"
"	.bss\n"
"	.align 32\n"
"	.type	query, @object\n"
"	.size	query, 640640\n"
"query:\n"
"	.zero	640640\n"
"	.globl	hashAcc\n"
"	.align 32\n"
"	.type	hashAcc, @object\n"
"	.size	hashAcc, 80056\n"
"hashAcc:\n"
"	.zero	80056\n"
"	.globl	hashPos\n"
"	.align 32\n"
"	.type	hashPos, @object\n"
"	.size	hashPos, 80056\n"
"hashPos:\n"
"	.zero	80056\n"
"	.globl	ans\n"
"	.align 32\n"
"	.type	ans, @object\n"
"	.size	ans, 160080\n"
"ans:\n"
"	.zero	160080\n"
"	.ident	\"GCC: (Ubuntu/Linaro 4.6.1-9ubuntu3) 4.6.1\"\n"
"	.section	.note.GNU-stack,\"\",@progbits\n"
);
